
LAB3_BUTTONS_SWITCHES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080033d4  080033d4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d4  080033d4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000088  08003464  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003464  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b5d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c98  00000000  00000000  00029c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fd9  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c308  00000000  00000000  00043c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082642  00000000  00000000  0004ffa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d25e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  000d2638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003398 	.word	0x08003398

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003398 	.word	0x08003398

0800014c <clearAllButtons>:

// GPIO ports and pins for each button
GPIO_TypeDef* BUTTON_GPIO_Port[NUM_BUTTONS] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};
uint16_t BUTTON_Pin[NUM_BUTTONS] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

void clearAllButtons() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e01d      	b.n	8000194 <clearAllButtons+0x48>
		KeyReg1[i] = NORMAL_STATE;
 8000158:	4a12      	ldr	r2, [pc, #72]	; (80001a4 <clearAllButtons+0x58>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg2[i] = NORMAL_STATE;
 8000162:	4a11      	ldr	r2, [pc, #68]	; (80001a8 <clearAllButtons+0x5c>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		KeyReg0[i] = NORMAL_STATE;
 800016c:	4a0f      	ldr	r2, [pc, #60]	; (80001ac <clearAllButtons+0x60>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(BUTTON_GPIO_Port[i], BUTTON_Pin[i], NORMAL_STATE);
 8000176:	4a0e      	ldr	r2, [pc, #56]	; (80001b0 <clearAllButtons+0x64>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800017e:	4a0d      	ldr	r2, [pc, #52]	; (80001b4 <clearAllButtons+0x68>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000186:	2201      	movs	r2, #1
 8000188:	4619      	mov	r1, r3
 800018a:	f002 f8f0 	bl	800236e <HAL_GPIO_WritePin>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b02      	cmp	r3, #2
 8000198:	ddde      	ble.n	8000158 <clearAllButtons+0xc>
	}
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	20000018 	.word	0x20000018
 80001ac:	20000000 	.word	0x20000000
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	20000048 	.word	0x20000048

080001b8 <isButtonPressed>:

int isButtonPressed(int button_index) {
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if (button_flag[button_index] == 1) {
 80001c0:	4a09      	ldr	r2, [pc, #36]	; (80001e8 <isButtonPressed+0x30>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d106      	bne.n	80001da <isButtonPressed+0x22>
		button_flag[button_index] = 0;
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2100      	movs	r1, #0
 80001d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001d6:	2301      	movs	r3, #1
 80001d8:	e000      	b.n	80001dc <isButtonPressed+0x24>
	}
	return 0;
 80001da:	2300      	movs	r3, #0
}
 80001dc:	4618      	mov	r0, r3
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000a4 	.word	0x200000a4

080001ec <subKeyProcess>:
//		return 1;
//	}
//	return 0;
//}

void subKeyProcess(int button_index) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	button_flag[button_index] = 1;
 80001f4:	4a04      	ldr	r2, [pc, #16]	; (8000208 <subKeyProcess+0x1c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2101      	movs	r1, #1
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	200000a4 	.word	0x200000a4

0800020c <getKeyInput>:

void getKeyInput() {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e06d      	b.n	80002f4 <getKeyInput+0xe8>
		KeyReg2[i] = KeyReg1[i];
 8000218:	4a3a      	ldr	r2, [pc, #232]	; (8000304 <getKeyInput+0xf8>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4939      	ldr	r1, [pc, #228]	; (8000308 <getKeyInput+0xfc>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000228:	4a38      	ldr	r2, [pc, #224]	; (800030c <getKeyInput+0x100>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4934      	ldr	r1, [pc, #208]	; (8000304 <getKeyInput+0xf8>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_GPIO_Port[i], BUTTON_Pin[i]);
 8000238:	4a35      	ldr	r2, [pc, #212]	; (8000310 <getKeyInput+0x104>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4934      	ldr	r1, [pc, #208]	; (8000314 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000248:	4619      	mov	r1, r3
 800024a:	4610      	mov	r0, r2
 800024c:	f002 f878 	bl	8002340 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	4619      	mov	r1, r3
 8000254:	4a2d      	ldr	r2, [pc, #180]	; (800030c <getKeyInput+0x100>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <getKeyInput+0xf8>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4929      	ldr	r1, [pc, #164]	; (800030c <getKeyInput+0x100>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d13e      	bne.n	80002ee <getKeyInput+0xe2>
 8000270:	4a24      	ldr	r2, [pc, #144]	; (8000304 <getKeyInput+0xf8>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4923      	ldr	r1, [pc, #140]	; (8000308 <getKeyInput+0xfc>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d134      	bne.n	80002ee <getKeyInput+0xe2>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000284:	4a20      	ldr	r2, [pc, #128]	; (8000308 <getKeyInput+0xfc>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4922      	ldr	r1, [pc, #136]	; (8000318 <getKeyInput+0x10c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000294:	429a      	cmp	r2, r3
 8000296:	d016      	beq.n	80002c6 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <getKeyInput+0xfc>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a0:	491d      	ldr	r1, [pc, #116]	; (8000318 <getKeyInput+0x10c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg2[i] == PRESSED_STATE) {
 80002a8:	4a17      	ldr	r2, [pc, #92]	; (8000308 <getKeyInput+0xfc>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d11c      	bne.n	80002ee <getKeyInput+0xe2>
					TimeOutForKeyPress[i] = 200;
 80002b4:	4a19      	ldr	r2, [pc, #100]	; (800031c <getKeyInput+0x110>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	21c8      	movs	r1, #200	; 0xc8
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff94 	bl	80001ec <subKeyProcess>
 80002c4:	e013      	b.n	80002ee <getKeyInput+0xe2>
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002c6:	4a15      	ldr	r2, [pc, #84]	; (800031c <getKeyInput+0x110>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	1e5a      	subs	r2, r3, #1
 80002d0:	4912      	ldr	r1, [pc, #72]	; (800031c <getKeyInput+0x110>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 80002d8:	4a10      	ldr	r2, [pc, #64]	; (800031c <getKeyInput+0x110>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d104      	bne.n	80002ee <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 80002e4:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <getKeyInput+0x10c>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2101      	movs	r1, #1
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3301      	adds	r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	dd8e      	ble.n	8000218 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000000c 	.word	0x2000000c
 8000308:	20000018 	.word	0x20000018
 800030c:	20000000 	.word	0x20000000
 8000310:	2000003c 	.word	0x2000003c
 8000314:	20000048 	.word	0x20000048
 8000318:	20000024 	.word	0x20000024
 800031c:	20000030 	.word	0x20000030

08000320 <fsm_automatic_run1>:
 *      Author: nhanvo
 */

#include "fsm_automatic.h"

void fsm_automatic_run1() {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	switch(status1){
 8000324:	4b87      	ldr	r3, [pc, #540]	; (8000544 <fsm_automatic_run1+0x224>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	2b0e      	cmp	r3, #14
 800032c:	f200 8204 	bhi.w	8000738 <fsm_automatic_run1+0x418>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <fsm_automatic_run1+0x18>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000375 	.word	0x08000375
 800033c:	080003bf 	.word	0x080003bf
 8000340:	08000581 	.word	0x08000581
 8000344:	08000481 	.word	0x08000481
 8000348:	08000739 	.word	0x08000739
 800034c:	08000739 	.word	0x08000739
 8000350:	08000739 	.word	0x08000739
 8000354:	08000739 	.word	0x08000739
 8000358:	08000739 	.word	0x08000739
 800035c:	08000739 	.word	0x08000739
 8000360:	08000739 	.word	0x08000739
 8000364:	08000739 	.word	0x08000739
 8000368:	08000739 	.word	0x08000739
 800036c:	08000739 	.word	0x08000739
 8000370:	08000643 	.word	0x08000643
			case INIT:
				//TODO
				setRedLed1();
 8000374:	f001 fa00 	bl	8001778 <setRedLed1>
				status1 = AUTO_RED;
 8000378:	4b72      	ldr	r3, [pc, #456]	; (8000544 <fsm_automatic_run1+0x224>)
 800037a:	2202      	movs	r2, #2
 800037c:	601a      	str	r2, [r3, #0]
				lastState1 = status1;
 800037e:	4b71      	ldr	r3, [pc, #452]	; (8000544 <fsm_automatic_run1+0x224>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a71      	ldr	r2, [pc, #452]	; (8000548 <fsm_automatic_run1+0x228>)
 8000384:	6013      	str	r3, [r2, #0]
				setTimer(0, red_duration);
 8000386:	4b71      	ldr	r3, [pc, #452]	; (800054c <fsm_automatic_run1+0x22c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	2000      	movs	r0, #0
 800038e:	f001 fbeb 	bl	8001b68 <setTimer>
				setTimer(2, 1000);
 8000392:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000396:	2002      	movs	r0, #2
 8000398:	f001 fbe6 	bl	8001b68 <setTimer>
				timeCountdown1 = red_duration/1000;
 800039c:	4b6b      	ldr	r3, [pc, #428]	; (800054c <fsm_automatic_run1+0x22c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a6b      	ldr	r2, [pc, #428]	; (8000550 <fsm_automatic_run1+0x230>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	1192      	asrs	r2, r2, #6
 80003a8:	17db      	asrs	r3, r3, #31
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a69      	ldr	r2, [pc, #420]	; (8000554 <fsm_automatic_run1+0x234>)
 80003ae:	6013      	str	r3, [r2, #0]
				set1 = &timeCountdown1;
 80003b0:	4b69      	ldr	r3, [pc, #420]	; (8000558 <fsm_automatic_run1+0x238>)
 80003b2:	4a68      	ldr	r2, [pc, #416]	; (8000554 <fsm_automatic_run1+0x234>)
 80003b4:	601a      	str	r2, [r3, #0]
				mode = 1;
 80003b6:	4b69      	ldr	r3, [pc, #420]	; (800055c <fsm_automatic_run1+0x23c>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
				break;
 80003bc:	e1c5      	b.n	800074a <fsm_automatic_run1+0x42a>

			case AUTO_RED:
				//TODO
				setRedLed1();
 80003be:	f001 f9db 	bl	8001778 <setRedLed1>
				mode = 1;
 80003c2:	4b66      	ldr	r3, [pc, #408]	; (800055c <fsm_automatic_run1+0x23c>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	601a      	str	r2, [r3, #0]
				if(timer_flag[2] == 1) {
 80003c8:	4b65      	ldr	r3, [pc, #404]	; (8000560 <fsm_automatic_run1+0x240>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d109      	bne.n	80003e4 <fsm_automatic_run1+0xc4>
					setTimer(2, 1000);
 80003d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d4:	2002      	movs	r0, #2
 80003d6:	f001 fbc7 	bl	8001b68 <setTimer>
					timeCountdown1--;
 80003da:	4b5e      	ldr	r3, [pc, #376]	; (8000554 <fsm_automatic_run1+0x234>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	4a5c      	ldr	r2, [pc, #368]	; (8000554 <fsm_automatic_run1+0x234>)
 80003e2:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[0] == 1) {
 80003e4:	4b5e      	ldr	r3, [pc, #376]	; (8000560 <fsm_automatic_run1+0x240>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d117      	bne.n	800041c <fsm_automatic_run1+0xfc>
					status1 = AUTO_GREEN;
 80003ec:	4b55      	ldr	r3, [pc, #340]	; (8000544 <fsm_automatic_run1+0x224>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	601a      	str	r2, [r3, #0]
					setTimer(0, green_duration);
 80003f2:	4b5c      	ldr	r3, [pc, #368]	; (8000564 <fsm_automatic_run1+0x244>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4619      	mov	r1, r3
 80003f8:	2000      	movs	r0, #0
 80003fa:	f001 fbb5 	bl	8001b68 <setTimer>
					setTimer(2, 1000);
 80003fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000402:	2002      	movs	r0, #2
 8000404:	f001 fbb0 	bl	8001b68 <setTimer>
					timeCountdown1 = green_duration/1000;
 8000408:	4b56      	ldr	r3, [pc, #344]	; (8000564 <fsm_automatic_run1+0x244>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a50      	ldr	r2, [pc, #320]	; (8000550 <fsm_automatic_run1+0x230>)
 800040e:	fb82 1203 	smull	r1, r2, r2, r3
 8000412:	1192      	asrs	r2, r2, #6
 8000414:	17db      	asrs	r3, r3, #31
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4a4e      	ldr	r2, [pc, #312]	; (8000554 <fsm_automatic_run1+0x234>)
 800041a:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff fecb 	bl	80001b8 <isButtonPressed>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	f000 8189 	beq.w	800073c <fsm_automatic_run1+0x41c>
					clearAllLed();
 800042a:	f001 fa53 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 800042e:	4b45      	ldr	r3, [pc, #276]	; (8000544 <fsm_automatic_run1+0x224>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a45      	ldr	r2, [pc, #276]	; (8000548 <fsm_automatic_run1+0x228>)
 8000434:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 8000436:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <fsm_automatic_run1+0x248>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a4c      	ldr	r2, [pc, #304]	; (800056c <fsm_automatic_run1+0x24c>)
 800043c:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 800043e:	4b41      	ldr	r3, [pc, #260]	; (8000544 <fsm_automatic_run1+0x224>)
 8000440:	220f      	movs	r2, #15
 8000442:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 8000444:	4b48      	ldr	r3, [pc, #288]	; (8000568 <fsm_automatic_run1+0x248>)
 8000446:	220f      	movs	r2, #15
 8000448:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 800044a:	4b49      	ldr	r3, [pc, #292]	; (8000570 <fsm_automatic_run1+0x250>)
 800044c:	220c      	movs	r2, #12
 800044e:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 8000450:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000454:	2000      	movs	r0, #0
 8000456:	f001 fb87 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 800045a:	2100      	movs	r1, #0
 800045c:	2001      	movs	r0, #1
 800045e:	f001 fb83 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 8000462:	2100      	movs	r1, #0
 8000464:	2002      	movs	r0, #2
 8000466:	f001 fb7f 	bl	8001b68 <setTimer>
					setTimer(3, 0);
 800046a:	2100      	movs	r1, #0
 800046c:	2003      	movs	r0, #3
 800046e:	f001 fb7b 	bl	8001b68 <setTimer>
					set1 = &time_input;
 8000472:	4b39      	ldr	r3, [pc, #228]	; (8000558 <fsm_automatic_run1+0x238>)
 8000474:	4a3f      	ldr	r2, [pc, #252]	; (8000574 <fsm_automatic_run1+0x254>)
 8000476:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 8000478:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <fsm_automatic_run1+0x258>)
 800047a:	4a38      	ldr	r2, [pc, #224]	; (800055c <fsm_automatic_run1+0x23c>)
 800047c:	601a      	str	r2, [r3, #0]
				}
				break;
 800047e:	e15d      	b.n	800073c <fsm_automatic_run1+0x41c>

			case AUTO_GREEN:
				//TODO
				setGreenLed1();
 8000480:	f001 f9a6 	bl	80017d0 <setGreenLed1>
				mode = 1;
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <fsm_automatic_run1+0x23c>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
				if(timer_flag[2] == 1) {
 800048a:	4b35      	ldr	r3, [pc, #212]	; (8000560 <fsm_automatic_run1+0x240>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d109      	bne.n	80004a6 <fsm_automatic_run1+0x186>
					setTimer(2, 1000);
 8000492:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000496:	2002      	movs	r0, #2
 8000498:	f001 fb66 	bl	8001b68 <setTimer>
					timeCountdown1--;
 800049c:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <fsm_automatic_run1+0x234>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a2c      	ldr	r2, [pc, #176]	; (8000554 <fsm_automatic_run1+0x234>)
 80004a4:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[0] == 1) {
 80004a6:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <fsm_automatic_run1+0x240>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d117      	bne.n	80004de <fsm_automatic_run1+0x1be>
					status1 = AUTO_YELLOW;
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <fsm_automatic_run1+0x224>)
 80004b0:	2203      	movs	r2, #3
 80004b2:	601a      	str	r2, [r3, #0]
					setTimer(0, yellow_duration);
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <fsm_automatic_run1+0x25c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f001 fb54 	bl	8001b68 <setTimer>
					setTimer(2, 1000);
 80004c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c4:	2002      	movs	r0, #2
 80004c6:	f001 fb4f 	bl	8001b68 <setTimer>
					timeCountdown1 = yellow_duration/1000;
 80004ca:	4b2c      	ldr	r3, [pc, #176]	; (800057c <fsm_automatic_run1+0x25c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a20      	ldr	r2, [pc, #128]	; (8000550 <fsm_automatic_run1+0x230>)
 80004d0:	fb82 1203 	smull	r1, r2, r2, r3
 80004d4:	1192      	asrs	r2, r2, #6
 80004d6:	17db      	asrs	r3, r3, #31
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <fsm_automatic_run1+0x234>)
 80004dc:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff fe6a 	bl	80001b8 <isButtonPressed>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f000 812a 	beq.w	8000740 <fsm_automatic_run1+0x420>
					clearAllLed();
 80004ec:	f001 f9f2 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <fsm_automatic_run1+0x224>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <fsm_automatic_run1+0x228>)
 80004f6:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <fsm_automatic_run1+0x248>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <fsm_automatic_run1+0x24c>)
 80004fe:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <fsm_automatic_run1+0x224>)
 8000502:	220f      	movs	r2, #15
 8000504:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <fsm_automatic_run1+0x248>)
 8000508:	220f      	movs	r2, #15
 800050a:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <fsm_automatic_run1+0x250>)
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 8000512:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000516:	2000      	movs	r0, #0
 8000518:	f001 fb26 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fb22 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 8000524:	2100      	movs	r1, #0
 8000526:	2002      	movs	r0, #2
 8000528:	f001 fb1e 	bl	8001b68 <setTimer>
					setTimer(3, 0);;
 800052c:	2100      	movs	r1, #0
 800052e:	2003      	movs	r0, #3
 8000530:	f001 fb1a 	bl	8001b68 <setTimer>
					set1 = &time_input;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <fsm_automatic_run1+0x238>)
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <fsm_automatic_run1+0x254>)
 8000538:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <fsm_automatic_run1+0x258>)
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <fsm_automatic_run1+0x23c>)
 800053e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000540:	e0fe      	b.n	8000740 <fsm_automatic_run1+0x420>
 8000542:	bf00      	nop
 8000544:	20000050 	.word	0x20000050
 8000548:	20000054 	.word	0x20000054
 800054c:	20000064 	.word	0x20000064
 8000550:	10624dd3 	.word	0x10624dd3
 8000554:	200000b0 	.word	0x200000b0
 8000558:	200000c8 	.word	0x200000c8
 800055c:	20000074 	.word	0x20000074
 8000560:	2000013c 	.word	0x2000013c
 8000564:	2000006c 	.word	0x2000006c
 8000568:	20000058 	.word	0x20000058
 800056c:	2000005c 	.word	0x2000005c
 8000570:	20000060 	.word	0x20000060
 8000574:	20000070 	.word	0x20000070
 8000578:	200000c4 	.word	0x200000c4
 800057c:	20000068 	.word	0x20000068

			case AUTO_YELLOW:
				//TODO
				setYellowLed1();
 8000580:	f001 f910 	bl	80017a4 <setYellowLed1>
				mode = 1;
 8000584:	4b72      	ldr	r3, [pc, #456]	; (8000750 <fsm_automatic_run1+0x430>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
				if(timer_flag[2] == 1) {
 800058a:	4b72      	ldr	r3, [pc, #456]	; (8000754 <fsm_automatic_run1+0x434>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d109      	bne.n	80005a6 <fsm_automatic_run1+0x286>
					setTimer(2, 1000);
 8000592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000596:	2002      	movs	r0, #2
 8000598:	f001 fae6 	bl	8001b68 <setTimer>
					timeCountdown1--;
 800059c:	4b6e      	ldr	r3, [pc, #440]	; (8000758 <fsm_automatic_run1+0x438>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4a6d      	ldr	r2, [pc, #436]	; (8000758 <fsm_automatic_run1+0x438>)
 80005a4:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[0] == 1){
 80005a6:	4b6b      	ldr	r3, [pc, #428]	; (8000754 <fsm_automatic_run1+0x434>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d117      	bne.n	80005de <fsm_automatic_run1+0x2be>
					setTimer(0, red_duration);
 80005ae:	4b6b      	ldr	r3, [pc, #428]	; (800075c <fsm_automatic_run1+0x43c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2000      	movs	r0, #0
 80005b6:	f001 fad7 	bl	8001b68 <setTimer>
					status1 = AUTO_RED;
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <fsm_automatic_run1+0x440>)
 80005bc:	2202      	movs	r2, #2
 80005be:	601a      	str	r2, [r3, #0]
					setTimer(2, 1000);
 80005c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c4:	2002      	movs	r0, #2
 80005c6:	f001 facf 	bl	8001b68 <setTimer>
					timeCountdown1 = red_duration/1000;
 80005ca:	4b64      	ldr	r3, [pc, #400]	; (800075c <fsm_automatic_run1+0x43c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a65      	ldr	r2, [pc, #404]	; (8000764 <fsm_automatic_run1+0x444>)
 80005d0:	fb82 1203 	smull	r1, r2, r2, r3
 80005d4:	1192      	asrs	r2, r2, #6
 80005d6:	17db      	asrs	r3, r3, #31
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	4a5f      	ldr	r2, [pc, #380]	; (8000758 <fsm_automatic_run1+0x438>)
 80005dc:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff fdea 	bl	80001b8 <isButtonPressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 80ac 	beq.w	8000744 <fsm_automatic_run1+0x424>
					clearAllLed();
 80005ec:	f001 f972 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <fsm_automatic_run1+0x440>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a5c      	ldr	r2, [pc, #368]	; (8000768 <fsm_automatic_run1+0x448>)
 80005f6:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 80005f8:	4b5c      	ldr	r3, [pc, #368]	; (800076c <fsm_automatic_run1+0x44c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a5c      	ldr	r2, [pc, #368]	; (8000770 <fsm_automatic_run1+0x450>)
 80005fe:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 8000600:	4b57      	ldr	r3, [pc, #348]	; (8000760 <fsm_automatic_run1+0x440>)
 8000602:	220f      	movs	r2, #15
 8000604:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <fsm_automatic_run1+0x44c>)
 8000608:	220f      	movs	r2, #15
 800060a:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <fsm_automatic_run1+0x454>)
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 8000612:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000616:	2000      	movs	r0, #0
 8000618:	f001 faa6 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	2001      	movs	r0, #1
 8000620:	f001 faa2 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	2002      	movs	r0, #2
 8000628:	f001 fa9e 	bl	8001b68 <setTimer>
					setTimer(3, 0);;
 800062c:	2100      	movs	r1, #0
 800062e:	2003      	movs	r0, #3
 8000630:	f001 fa9a 	bl	8001b68 <setTimer>
					set1 = &time_input;
 8000634:	4b50      	ldr	r3, [pc, #320]	; (8000778 <fsm_automatic_run1+0x458>)
 8000636:	4a51      	ldr	r2, [pc, #324]	; (800077c <fsm_automatic_run1+0x45c>)
 8000638:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 800063a:	4b51      	ldr	r3, [pc, #324]	; (8000780 <fsm_automatic_run1+0x460>)
 800063c:	4a44      	ldr	r2, [pc, #272]	; (8000750 <fsm_automatic_run1+0x430>)
 800063e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000640:	e080      	b.n	8000744 <fsm_automatic_run1+0x424>

			case WAIT:
				//TODO
				if(lastState1 == AUTO_RED && returnFlag1 == BACK_TO_AUTOMATIC){
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <fsm_automatic_run1+0x448>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d124      	bne.n	8000694 <fsm_automatic_run1+0x374>
 800064a:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <fsm_automatic_run1+0x464>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b10      	cmp	r3, #16
 8000650:	d120      	bne.n	8000694 <fsm_automatic_run1+0x374>
					clearAllLed();
 8000652:	f001 f93f 	bl	80018d4 <clearAllLed>
					returnFlag1 = 0;
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <fsm_automatic_run1+0x464>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
					status1 = lastState1;
 800065c:	4b42      	ldr	r3, [pc, #264]	; (8000768 <fsm_automatic_run1+0x448>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a3f      	ldr	r2, [pc, #252]	; (8000760 <fsm_automatic_run1+0x440>)
 8000662:	6013      	str	r3, [r2, #0]
					setTimer(0, red_duration);
 8000664:	4b3d      	ldr	r3, [pc, #244]	; (800075c <fsm_automatic_run1+0x43c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	2000      	movs	r0, #0
 800066c:	f001 fa7c 	bl	8001b68 <setTimer>
					setTimer(2, 1000);
 8000670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000674:	2002      	movs	r0, #2
 8000676:	f001 fa77 	bl	8001b68 <setTimer>
					timeCountdown1 = red_duration/1000;
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <fsm_automatic_run1+0x43c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a39      	ldr	r2, [pc, #228]	; (8000764 <fsm_automatic_run1+0x444>)
 8000680:	fb82 1203 	smull	r1, r2, r2, r3
 8000684:	1192      	asrs	r2, r2, #6
 8000686:	17db      	asrs	r3, r3, #31
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <fsm_automatic_run1+0x438>)
 800068c:	6013      	str	r3, [r2, #0]
					set1 = &timeCountdown1;
 800068e:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <fsm_automatic_run1+0x458>)
 8000690:	4a31      	ldr	r2, [pc, #196]	; (8000758 <fsm_automatic_run1+0x438>)
 8000692:	601a      	str	r2, [r3, #0]
				}
				if(lastState1 == AUTO_GREEN && returnFlag1 == BACK_TO_AUTOMATIC){
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <fsm_automatic_run1+0x448>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d124      	bne.n	80006e6 <fsm_automatic_run1+0x3c6>
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <fsm_automatic_run1+0x464>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b10      	cmp	r3, #16
 80006a2:	d120      	bne.n	80006e6 <fsm_automatic_run1+0x3c6>
					clearAllLed();
 80006a4:	f001 f916 	bl	80018d4 <clearAllLed>
					returnFlag1 = 0;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <fsm_automatic_run1+0x464>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
					status1 = lastState1;
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <fsm_automatic_run1+0x448>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <fsm_automatic_run1+0x440>)
 80006b4:	6013      	str	r3, [r2, #0]
					setTimer(0, green_duration);
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <fsm_automatic_run1+0x468>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f001 fa53 	bl	8001b68 <setTimer>
					setTimer(2, 1000);
 80006c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c6:	2002      	movs	r0, #2
 80006c8:	f001 fa4e 	bl	8001b68 <setTimer>
					timeCountdown1 = green_duration/1000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <fsm_automatic_run1+0x468>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	; (8000764 <fsm_automatic_run1+0x444>)
 80006d2:	fb82 1203 	smull	r1, r2, r2, r3
 80006d6:	1192      	asrs	r2, r2, #6
 80006d8:	17db      	asrs	r3, r3, #31
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <fsm_automatic_run1+0x438>)
 80006de:	6013      	str	r3, [r2, #0]
					set1 = &timeCountdown1;
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <fsm_automatic_run1+0x458>)
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <fsm_automatic_run1+0x438>)
 80006e4:	601a      	str	r2, [r3, #0]
				}
				if(lastState1 == AUTO_YELLOW && returnFlag1 == BACK_TO_AUTOMATIC) {
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <fsm_automatic_run1+0x448>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d12c      	bne.n	8000748 <fsm_automatic_run1+0x428>
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <fsm_automatic_run1+0x464>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b10      	cmp	r3, #16
 80006f4:	d128      	bne.n	8000748 <fsm_automatic_run1+0x428>
					clearAllLed();
 80006f6:	f001 f8ed 	bl	80018d4 <clearAllLed>
					returnFlag1 = 0;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <fsm_automatic_run1+0x464>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
					status1 = AUTO_GREEN;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <fsm_automatic_run1+0x440>)
 8000702:	2204      	movs	r2, #4
 8000704:	601a      	str	r2, [r3, #0]
					setTimer(0, green_duration);
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <fsm_automatic_run1+0x468>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	2000      	movs	r0, #0
 800070e:	f001 fa2b 	bl	8001b68 <setTimer>
					setTimer(2, 1000);
 8000712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000716:	2002      	movs	r0, #2
 8000718:	f001 fa26 	bl	8001b68 <setTimer>
					timeCountdown1 = green_duration/1000;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <fsm_automatic_run1+0x468>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <fsm_automatic_run1+0x444>)
 8000722:	fb82 1203 	smull	r1, r2, r2, r3
 8000726:	1192      	asrs	r2, r2, #6
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <fsm_automatic_run1+0x438>)
 800072e:	6013      	str	r3, [r2, #0]
					set1 = &timeCountdown1;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <fsm_automatic_run1+0x458>)
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <fsm_automatic_run1+0x438>)
 8000734:	601a      	str	r2, [r3, #0]
				}
				break;
 8000736:	e007      	b.n	8000748 <fsm_automatic_run1+0x428>

			default:
				break;
 8000738:	bf00      	nop
 800073a:	e006      	b.n	800074a <fsm_automatic_run1+0x42a>
				break;
 800073c:	bf00      	nop
 800073e:	e004      	b.n	800074a <fsm_automatic_run1+0x42a>
				break;
 8000740:	bf00      	nop
 8000742:	e002      	b.n	800074a <fsm_automatic_run1+0x42a>
				break;
 8000744:	bf00      	nop
 8000746:	e000      	b.n	800074a <fsm_automatic_run1+0x42a>
				break;
 8000748:	bf00      	nop
	}
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000074 	.word	0x20000074
 8000754:	2000013c 	.word	0x2000013c
 8000758:	200000b0 	.word	0x200000b0
 800075c:	20000064 	.word	0x20000064
 8000760:	20000050 	.word	0x20000050
 8000764:	10624dd3 	.word	0x10624dd3
 8000768:	20000054 	.word	0x20000054
 800076c:	20000058 	.word	0x20000058
 8000770:	2000005c 	.word	0x2000005c
 8000774:	20000060 	.word	0x20000060
 8000778:	200000c8 	.word	0x200000c8
 800077c:	20000070 	.word	0x20000070
 8000780:	200000c4 	.word	0x200000c4
 8000784:	200000b8 	.word	0x200000b8
 8000788:	2000006c 	.word	0x2000006c

0800078c <fsm_automatic_run2>:
void fsm_automatic_run2() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	switch(status2){
 8000790:	4b84      	ldr	r3, [pc, #528]	; (80009a4 <fsm_automatic_run2+0x218>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	2b0e      	cmp	r3, #14
 8000798:	f200 81fc 	bhi.w	8000b94 <fsm_automatic_run2+0x408>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <fsm_automatic_run2+0x18>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007e1 	.word	0x080007e1
 80007a8:	0800082b 	.word	0x0800082b
 80007ac:	080009dd 	.word	0x080009dd
 80007b0:	080008ed 	.word	0x080008ed
 80007b4:	08000b95 	.word	0x08000b95
 80007b8:	08000b95 	.word	0x08000b95
 80007bc:	08000b95 	.word	0x08000b95
 80007c0:	08000b95 	.word	0x08000b95
 80007c4:	08000b95 	.word	0x08000b95
 80007c8:	08000b95 	.word	0x08000b95
 80007cc:	08000b95 	.word	0x08000b95
 80007d0:	08000b95 	.word	0x08000b95
 80007d4:	08000b95 	.word	0x08000b95
 80007d8:	08000b95 	.word	0x08000b95
 80007dc:	08000a9f 	.word	0x08000a9f
			case INIT:
				//TODO
				setGreenLed2();
 80007e0:	f001 f838 	bl	8001854 <setGreenLed2>
				status2 = AUTO_GREEN;
 80007e4:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <fsm_automatic_run2+0x218>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	601a      	str	r2, [r3, #0]
				lastState2 = status2;
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <fsm_automatic_run2+0x218>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a6e      	ldr	r2, [pc, #440]	; (80009a8 <fsm_automatic_run2+0x21c>)
 80007f0:	6013      	str	r3, [r2, #0]
				setTimer(1, green_duration);
 80007f2:	4b6e      	ldr	r3, [pc, #440]	; (80009ac <fsm_automatic_run2+0x220>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 f9b5 	bl	8001b68 <setTimer>
				setTimer(3, 1000);
 80007fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000802:	2003      	movs	r0, #3
 8000804:	f001 f9b0 	bl	8001b68 <setTimer>
				timeCountdown2 = green_duration/1000;
 8000808:	4b68      	ldr	r3, [pc, #416]	; (80009ac <fsm_automatic_run2+0x220>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a68      	ldr	r2, [pc, #416]	; (80009b0 <fsm_automatic_run2+0x224>)
 800080e:	fb82 1203 	smull	r1, r2, r2, r3
 8000812:	1192      	asrs	r2, r2, #6
 8000814:	17db      	asrs	r3, r3, #31
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	4a66      	ldr	r2, [pc, #408]	; (80009b4 <fsm_automatic_run2+0x228>)
 800081a:	6013      	str	r3, [r2, #0]
				set2 = &timeCountdown2;
 800081c:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <fsm_automatic_run2+0x22c>)
 800081e:	4a65      	ldr	r2, [pc, #404]	; (80009b4 <fsm_automatic_run2+0x228>)
 8000820:	601a      	str	r2, [r3, #0]
				mode = 1;
 8000822:	4b66      	ldr	r3, [pc, #408]	; (80009bc <fsm_automatic_run2+0x230>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
				break;
 8000828:	e1bd      	b.n	8000ba6 <fsm_automatic_run2+0x41a>

			case AUTO_RED:
				//TODO
				setRedLed2();
 800082a:	f000 ffe7 	bl	80017fc <setRedLed2>
				mode = 1;
 800082e:	4b63      	ldr	r3, [pc, #396]	; (80009bc <fsm_automatic_run2+0x230>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
				if(timer_flag[3] == 1) {
 8000834:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <fsm_automatic_run2+0x234>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d109      	bne.n	8000850 <fsm_automatic_run2+0xc4>
					setTimer(3, 1000);
 800083c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000840:	2003      	movs	r0, #3
 8000842:	f001 f991 	bl	8001b68 <setTimer>
					timeCountdown2--;
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <fsm_automatic_run2+0x228>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3b01      	subs	r3, #1
 800084c:	4a59      	ldr	r2, [pc, #356]	; (80009b4 <fsm_automatic_run2+0x228>)
 800084e:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[1] == 1) {
 8000850:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <fsm_automatic_run2+0x234>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d117      	bne.n	8000888 <fsm_automatic_run2+0xfc>
					status2 = AUTO_GREEN;
 8000858:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <fsm_automatic_run2+0x218>)
 800085a:	2204      	movs	r2, #4
 800085c:	601a      	str	r2, [r3, #0]
					setTimer(1, green_duration);
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <fsm_automatic_run2+0x220>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f97f 	bl	8001b68 <setTimer>
					setTimer(3, 1000);
 800086a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086e:	2003      	movs	r0, #3
 8000870:	f001 f97a 	bl	8001b68 <setTimer>
					timeCountdown2 = green_duration/1000;
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <fsm_automatic_run2+0x220>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a4d      	ldr	r2, [pc, #308]	; (80009b0 <fsm_automatic_run2+0x224>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1192      	asrs	r2, r2, #6
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a4b      	ldr	r2, [pc, #300]	; (80009b4 <fsm_automatic_run2+0x228>)
 8000886:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fc95 	bl	80001b8 <isButtonPressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	f000 8181 	beq.w	8000b98 <fsm_automatic_run2+0x40c>
					clearAllLed();
 8000896:	f001 f81d 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <fsm_automatic_run2+0x238>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a4a      	ldr	r2, [pc, #296]	; (80009c8 <fsm_automatic_run2+0x23c>)
 80008a0:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <fsm_automatic_run2+0x218>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <fsm_automatic_run2+0x21c>)
 80008a8:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <fsm_automatic_run2+0x238>)
 80008ac:	220f      	movs	r2, #15
 80008ae:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <fsm_automatic_run2+0x218>)
 80008b2:	220f      	movs	r2, #15
 80008b4:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <fsm_automatic_run2+0x240>)
 80008b8:	220c      	movs	r2, #12
 80008ba:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 80008bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 f951 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2001      	movs	r0, #1
 80008ca:	f001 f94d 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2002      	movs	r0, #2
 80008d2:	f001 f949 	bl	8001b68 <setTimer>
					setTimer(3, 0);;
 80008d6:	2100      	movs	r1, #0
 80008d8:	2003      	movs	r0, #3
 80008da:	f001 f945 	bl	8001b68 <setTimer>
					set1 = &time_input;
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <fsm_automatic_run2+0x244>)
 80008e0:	4a3c      	ldr	r2, [pc, #240]	; (80009d4 <fsm_automatic_run2+0x248>)
 80008e2:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 80008e4:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <fsm_automatic_run2+0x22c>)
 80008e6:	4a35      	ldr	r2, [pc, #212]	; (80009bc <fsm_automatic_run2+0x230>)
 80008e8:	601a      	str	r2, [r3, #0]
				}
				break;
 80008ea:	e155      	b.n	8000b98 <fsm_automatic_run2+0x40c>

			case AUTO_GREEN:
				//TODO
				setGreenLed2();
 80008ec:	f000 ffb2 	bl	8001854 <setGreenLed2>
				mode = 1;
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <fsm_automatic_run2+0x230>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
				if(timer_flag[3] == 1) {
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <fsm_automatic_run2+0x234>)
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d109      	bne.n	8000912 <fsm_automatic_run2+0x186>
					setTimer(3, 1000);
 80008fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000902:	2003      	movs	r0, #3
 8000904:	f001 f930 	bl	8001b68 <setTimer>
					timeCountdown2--;
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <fsm_automatic_run2+0x228>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <fsm_automatic_run2+0x228>)
 8000910:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[1] == 1) {
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <fsm_automatic_run2+0x234>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d112      	bne.n	8000940 <fsm_automatic_run2+0x1b4>
					status2 = AUTO_YELLOW;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <fsm_automatic_run2+0x218>)
 800091c:	2203      	movs	r2, #3
 800091e:	601a      	str	r2, [r3, #0]
					setTimer(1, yellow_duration);
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <fsm_automatic_run2+0x24c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	2001      	movs	r0, #1
 8000928:	f001 f91e 	bl	8001b68 <setTimer>
					timeCountdown2 = yellow_duration/1000;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <fsm_automatic_run2+0x24c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <fsm_automatic_run2+0x224>)
 8000932:	fb82 1203 	smull	r1, r2, r2, r3
 8000936:	1192      	asrs	r2, r2, #6
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <fsm_automatic_run2+0x228>)
 800093e:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fc39 	bl	80001b8 <isButtonPressed>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 8127 	beq.w	8000b9c <fsm_automatic_run2+0x410>
					clearAllLed();
 800094e:	f000 ffc1 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <fsm_automatic_run2+0x238>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <fsm_automatic_run2+0x23c>)
 8000958:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <fsm_automatic_run2+0x218>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <fsm_automatic_run2+0x21c>)
 8000960:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <fsm_automatic_run2+0x238>)
 8000964:	220f      	movs	r2, #15
 8000966:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <fsm_automatic_run2+0x218>)
 800096a:	220f      	movs	r2, #15
 800096c:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <fsm_automatic_run2+0x240>)
 8000970:	220c      	movs	r2, #12
 8000972:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 8000974:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000978:	2000      	movs	r0, #0
 800097a:	f001 f8f5 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	2001      	movs	r0, #1
 8000982:	f001 f8f1 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 8000986:	2100      	movs	r1, #0
 8000988:	2002      	movs	r0, #2
 800098a:	f001 f8ed 	bl	8001b68 <setTimer>
					setTimer(3, 0);;
 800098e:	2100      	movs	r1, #0
 8000990:	2003      	movs	r0, #3
 8000992:	f001 f8e9 	bl	8001b68 <setTimer>
					set1 = &time_input;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <fsm_automatic_run2+0x244>)
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <fsm_automatic_run2+0x248>)
 800099a:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <fsm_automatic_run2+0x22c>)
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <fsm_automatic_run2+0x230>)
 80009a0:	601a      	str	r2, [r3, #0]
				}
				break;
 80009a2:	e0fb      	b.n	8000b9c <fsm_automatic_run2+0x410>
 80009a4:	20000058 	.word	0x20000058
 80009a8:	2000005c 	.word	0x2000005c
 80009ac:	2000006c 	.word	0x2000006c
 80009b0:	10624dd3 	.word	0x10624dd3
 80009b4:	200000b4 	.word	0x200000b4
 80009b8:	200000c4 	.word	0x200000c4
 80009bc:	20000074 	.word	0x20000074
 80009c0:	2000013c 	.word	0x2000013c
 80009c4:	20000050 	.word	0x20000050
 80009c8:	20000054 	.word	0x20000054
 80009cc:	20000060 	.word	0x20000060
 80009d0:	200000c8 	.word	0x200000c8
 80009d4:	20000070 	.word	0x20000070
 80009d8:	20000068 	.word	0x20000068

			case AUTO_YELLOW:
				//TODO
				setYellowLed2();
 80009dc:	f000 ff24 	bl	8001828 <setYellowLed2>
				mode = 1;
 80009e0:	4b72      	ldr	r3, [pc, #456]	; (8000bac <fsm_automatic_run2+0x420>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
				if(timer_flag[3] == 1) {
 80009e6:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <fsm_automatic_run2+0x424>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d109      	bne.n	8000a02 <fsm_automatic_run2+0x276>
					setTimer(3, 1000);
 80009ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f2:	2003      	movs	r0, #3
 80009f4:	f001 f8b8 	bl	8001b68 <setTimer>
					timeCountdown2--;
 80009f8:	4b6e      	ldr	r3, [pc, #440]	; (8000bb4 <fsm_automatic_run2+0x428>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	4a6d      	ldr	r2, [pc, #436]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000a00:	6013      	str	r3, [r2, #0]
				}
				if(timer_flag[1] == 1){
 8000a02:	4b6b      	ldr	r3, [pc, #428]	; (8000bb0 <fsm_automatic_run2+0x424>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d117      	bne.n	8000a3a <fsm_automatic_run2+0x2ae>
					setTimer(1, red_duration);
 8000a0a:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <fsm_automatic_run2+0x42c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	f001 f8a9 	bl	8001b68 <setTimer>
					status2 = AUTO_RED;
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]
					setTimer(3, 1000);
 8000a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a20:	2003      	movs	r0, #3
 8000a22:	f001 f8a1 	bl	8001b68 <setTimer>
					timeCountdown2 = red_duration/1000;
 8000a26:	4b64      	ldr	r3, [pc, #400]	; (8000bb8 <fsm_automatic_run2+0x42c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a65      	ldr	r2, [pc, #404]	; (8000bc0 <fsm_automatic_run2+0x434>)
 8000a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a30:	1192      	asrs	r2, r2, #6
 8000a32:	17db      	asrs	r3, r3, #31
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a5f      	ldr	r2, [pc, #380]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000a38:	6013      	str	r3, [r2, #0]
				}
				if(isButtonPressed(0)){
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fbbc 	bl	80001b8 <isButtonPressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 80ac 	beq.w	8000ba0 <fsm_automatic_run2+0x414>
					clearAllLed();
 8000a48:	f000 ff44 	bl	80018d4 <clearAllLed>
					lastState1 = status1;
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <fsm_automatic_run2+0x438>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a5d      	ldr	r2, [pc, #372]	; (8000bc8 <fsm_automatic_run2+0x43c>)
 8000a52:	6013      	str	r3, [r2, #0]
					lastState2 = status2;
 8000a54:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a5c      	ldr	r2, [pc, #368]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000a5a:	6013      	str	r3, [r2, #0]
					status1 = WAIT;
 8000a5c:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <fsm_automatic_run2+0x438>)
 8000a5e:	220f      	movs	r2, #15
 8000a60:	601a      	str	r2, [r3, #0]
					status2 = WAIT;
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000a64:	220f      	movs	r2, #15
 8000a66:	601a      	str	r2, [r3, #0]
					status3 = MODIFY_RED;
 8000a68:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <fsm_automatic_run2+0x444>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
					setTimer(0, 500);
 8000a6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a72:	2000      	movs	r0, #0
 8000a74:	f001 f878 	bl	8001b68 <setTimer>
					setTimer(1, 0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f001 f874 	bl	8001b68 <setTimer>
					setTimer(2, 0);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2002      	movs	r0, #2
 8000a84:	f001 f870 	bl	8001b68 <setTimer>
					setTimer(3, 0);;
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f001 f86c 	bl	8001b68 <setTimer>
					set1 = &time_input;
 8000a90:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <fsm_automatic_run2+0x448>)
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <fsm_automatic_run2+0x44c>)
 8000a94:	601a      	str	r2, [r3, #0]
					set2 = &mode;
 8000a96:	4b51      	ldr	r3, [pc, #324]	; (8000bdc <fsm_automatic_run2+0x450>)
 8000a98:	4a44      	ldr	r2, [pc, #272]	; (8000bac <fsm_automatic_run2+0x420>)
 8000a9a:	601a      	str	r2, [r3, #0]
				}
				break;
 8000a9c:	e080      	b.n	8000ba0 <fsm_automatic_run2+0x414>

			case WAIT:
				//TODO
				if(lastState2 == AUTO_RED && returnFlag2 == BACK_TO_AUTOMATIC){
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d124      	bne.n	8000af0 <fsm_automatic_run2+0x364>
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b10      	cmp	r3, #16
 8000aac:	d120      	bne.n	8000af0 <fsm_automatic_run2+0x364>
					clearAllLed();
 8000aae:	f000 ff11 	bl	80018d4 <clearAllLed>
					returnFlag2 = 0;
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
					status2 = lastState2;
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000abe:	6013      	str	r3, [r2, #0]
					setTimer(1, red_duration);
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <fsm_automatic_run2+0x42c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f001 f84e 	bl	8001b68 <setTimer>
					setTimer(3, 1000);
 8000acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f001 f849 	bl	8001b68 <setTimer>
					timeCountdown2 = red_duration/1000;
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <fsm_automatic_run2+0x42c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a39      	ldr	r2, [pc, #228]	; (8000bc0 <fsm_automatic_run2+0x434>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1192      	asrs	r2, r2, #6
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000ae8:	6013      	str	r3, [r2, #0]
					set2 = &timeCountdown2;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <fsm_automatic_run2+0x450>)
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000aee:	601a      	str	r2, [r3, #0]
				}
				if(lastState2 == AUTO_GREEN && returnFlag2 == BACK_TO_AUTOMATIC){
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d124      	bne.n	8000b42 <fsm_automatic_run2+0x3b6>
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d120      	bne.n	8000b42 <fsm_automatic_run2+0x3b6>
					clearAllLed();
 8000b00:	f000 fee8 	bl	80018d4 <clearAllLed>
					returnFlag2 = 0;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
					status2 = lastState2;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000b10:	6013      	str	r3, [r2, #0]
					setTimer(1, green_duration);
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <fsm_automatic_run2+0x458>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 f825 	bl	8001b68 <setTimer>
					setTimer(3, 1000);
 8000b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b22:	2003      	movs	r0, #3
 8000b24:	f001 f820 	bl	8001b68 <setTimer>
					timeCountdown2 = green_duration/1000;
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <fsm_automatic_run2+0x458>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a24      	ldr	r2, [pc, #144]	; (8000bc0 <fsm_automatic_run2+0x434>)
 8000b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b32:	1192      	asrs	r2, r2, #6
 8000b34:	17db      	asrs	r3, r3, #31
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000b3a:	6013      	str	r3, [r2, #0]
					set2 = &timeCountdown2;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <fsm_automatic_run2+0x450>)
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000b40:	601a      	str	r2, [r3, #0]
				}
				if(lastState2 == AUTO_YELLOW && returnFlag2 == BACK_TO_AUTOMATIC) {
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <fsm_automatic_run2+0x440>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d12c      	bne.n	8000ba4 <fsm_automatic_run2+0x418>
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b10      	cmp	r3, #16
 8000b50:	d128      	bne.n	8000ba4 <fsm_automatic_run2+0x418>
					clearAllLed();
 8000b52:	f000 febf 	bl	80018d4 <clearAllLed>
					returnFlag2 = 0;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <fsm_automatic_run2+0x454>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
					status2 = AUTO_GREEN;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <fsm_automatic_run2+0x430>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	601a      	str	r2, [r3, #0]
					setTimer(1, green_duration);
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <fsm_automatic_run2+0x458>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 fffd 	bl	8001b68 <setTimer>
					setTimer(3, 1000);
 8000b6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 fff8 	bl	8001b68 <setTimer>
					timeCountdown2 = green_duration/1000;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <fsm_automatic_run2+0x458>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <fsm_automatic_run2+0x434>)
 8000b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b82:	1192      	asrs	r2, r2, #6
 8000b84:	17db      	asrs	r3, r3, #31
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000b8a:	6013      	str	r3, [r2, #0]
					set2 = &timeCountdown2;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <fsm_automatic_run2+0x450>)
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <fsm_automatic_run2+0x428>)
 8000b90:	601a      	str	r2, [r3, #0]
				}
				break;
 8000b92:	e007      	b.n	8000ba4 <fsm_automatic_run2+0x418>

			default:
				break;
 8000b94:	bf00      	nop
 8000b96:	e006      	b.n	8000ba6 <fsm_automatic_run2+0x41a>
				break;
 8000b98:	bf00      	nop
 8000b9a:	e004      	b.n	8000ba6 <fsm_automatic_run2+0x41a>
				break;
 8000b9c:	bf00      	nop
 8000b9e:	e002      	b.n	8000ba6 <fsm_automatic_run2+0x41a>
				break;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <fsm_automatic_run2+0x41a>
				break;
 8000ba4:	bf00      	nop
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000074 	.word	0x20000074
 8000bb0:	2000013c 	.word	0x2000013c
 8000bb4:	200000b4 	.word	0x200000b4
 8000bb8:	20000064 	.word	0x20000064
 8000bbc:	20000058 	.word	0x20000058
 8000bc0:	10624dd3 	.word	0x10624dd3
 8000bc4:	20000050 	.word	0x20000050
 8000bc8:	20000054 	.word	0x20000054
 8000bcc:	2000005c 	.word	0x2000005c
 8000bd0:	20000060 	.word	0x20000060
 8000bd4:	200000c8 	.word	0x200000c8
 8000bd8:	20000070 	.word	0x20000070
 8000bdc:	200000c4 	.word	0x200000c4
 8000be0:	200000bc 	.word	0x200000bc
 8000be4:	2000006c 	.word	0x2000006c

08000be8 <fsm_setting_time>:
 *      Author: nhanvo
 */

#include "fsm_setting.h"

void fsm_setting_time() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
switch(status3){
 8000bec:	4b8a      	ldr	r3, [pc, #552]	; (8000e18 <fsm_setting_time+0x230>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3b0c      	subs	r3, #12
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	f200 8106 	bhi.w	8000e04 <fsm_setting_time+0x21c>
 8000bf8:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <fsm_setting_time+0x18>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000cb1 	.word	0x08000cb1
 8000c08:	08000d4f 	.word	0x08000d4f
 8000c0c:	08000e05 	.word	0x08000e05
		case MODIFY_RED:
			//set mode to display
			mode = 2;
 8000c10:	4b82      	ldr	r3, [pc, #520]	; (8000e1c <fsm_setting_time+0x234>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
			if(timer_flag[0] == 1) {
 8000c16:	4b82      	ldr	r3, [pc, #520]	; (8000e20 <fsm_setting_time+0x238>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d106      	bne.n	8000c2c <fsm_setting_time+0x44>
				setTimer(0, 500);
 8000c1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 ffa0 	bl	8001b68 <setTimer>
				toggleRed();
 8000c28:	f000 fe2a 	bl	8001880 <toggleRed>

			}

			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fac3 	bl	80001b8 <isButtonPressed>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00f      	beq.n	8000c58 <fsm_setting_time+0x70>
				clearAllLed();
 8000c38:	f000 fe4c 	bl	80018d4 <clearAllLed>
				//set new duration1 for red led
				red_duration = time_input * 1000;
 8000c3c:	4b79      	ldr	r3, [pc, #484]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a77      	ldr	r2, [pc, #476]	; (8000e28 <fsm_setting_time+0x240>)
 8000c4a:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW;
 8000c52:	4b71      	ldr	r3, [pc, #452]	; (8000e18 <fsm_setting_time+0x230>)
 8000c54:	220d      	movs	r2, #13
 8000c56:	601a      	str	r2, [r3, #0]
			}
			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff faad 	bl	80001b8 <isButtonPressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d015      	beq.n	8000c90 <fsm_setting_time+0xa8>
				time_input = (time_input + 1) % 100; //max value is 99
 8000c64:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	4b70      	ldr	r3, [pc, #448]	; (8000e2c <fsm_setting_time+0x244>)
 8000c6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c70:	1159      	asrs	r1, r3, #5
 8000c72:	17d3      	asrs	r3, r2, #31
 8000c74:	1acb      	subs	r3, r1, r3
 8000c76:	2164      	movs	r1, #100	; 0x64
 8000c78:	fb01 f303 	mul.w	r3, r1, r3
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a69      	ldr	r2, [pc, #420]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c80:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //0 is invalid value
 8000c82:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <fsm_setting_time+0xa8>
 8000c8a:	4b66      	ldr	r3, [pc, #408]	; (8000e24 <fsm_setting_time+0x23c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fa91 	bl	80001b8 <isButtonPressed>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80b5 	beq.w	8000e08 <fsm_setting_time+0x220>
				clearAllLed();
 8000c9e:	f000 fe19 	bl	80018d4 <clearAllLed>
				time_input = 1;
 8000ca2:	4b60      	ldr	r3, [pc, #384]	; (8000e24 <fsm_setting_time+0x23c>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_YELLOW;
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <fsm_setting_time+0x230>)
 8000caa:	220d      	movs	r2, #13
 8000cac:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cae:	e0ab      	b.n	8000e08 <fsm_setting_time+0x220>

		case MODIFY_YELLOW:
			//set mode to display
			mode = 3;
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <fsm_setting_time+0x234>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	601a      	str	r2, [r3, #0]
			if(timer_flag[0] == 1) {
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <fsm_setting_time+0x238>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d106      	bne.n	8000ccc <fsm_setting_time+0xe4>
				setTimer(0, 500);
 8000cbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 ff50 	bl	8001b68 <setTimer>
				toggleYellow();
 8000cc8:	f000 fde8 	bl	800189c <toggleYellow>
			}

			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)){
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fa73 	bl	80001b8 <isButtonPressed>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00f      	beq.n	8000cf8 <fsm_setting_time+0x110>
				clearAllLed();
 8000cd8:	f000 fdfc 	bl	80018d4 <clearAllLed>
				//set new duration1 for yellow led
				yellow_duration = time_input * 1000;
 8000cdc:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <fsm_setting_time+0x23c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <fsm_setting_time+0x248>)
 8000cea:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8000cec:	4b4d      	ldr	r3, [pc, #308]	; (8000e24 <fsm_setting_time+0x23c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN;
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <fsm_setting_time+0x230>)
 8000cf4:	220e      	movs	r2, #14
 8000cf6:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff fa5d 	bl	80001b8 <isButtonPressed>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d015      	beq.n	8000d30 <fsm_setting_time+0x148>
				time_input = (time_input + 1) % 100; //99 is the max value
 8000d04:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <fsm_setting_time+0x244>)
 8000d0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d10:	1159      	asrs	r1, r3, #5
 8000d12:	17d3      	asrs	r3, r2, #31
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	2164      	movs	r1, #100	; 0x64
 8000d18:	fb01 f303 	mul.w	r3, r1, r3
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d20:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //0 is invalid value
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <fsm_setting_time+0x148>
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fa41 	bl	80001b8 <isButtonPressed>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d067      	beq.n	8000e0c <fsm_setting_time+0x224>
				clearAllLed();
 8000d3c:	f000 fdca 	bl	80018d4 <clearAllLed>
				time_input = 1;
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
				status3 = MODIFY_GREEN;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <fsm_setting_time+0x230>)
 8000d48:	220e      	movs	r2, #14
 8000d4a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d4c:	e05e      	b.n	8000e0c <fsm_setting_time+0x224>

		case MODIFY_GREEN:
			//set mode to display
			mode = 4;
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <fsm_setting_time+0x234>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	601a      	str	r2, [r3, #0]
			if(timer_flag[0] == 1) {
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <fsm_setting_time+0x238>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d106      	bne.n	8000d6a <fsm_setting_time+0x182>
				setTimer(0, 500);
 8000d5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 ff01 	bl	8001b68 <setTimer>
				toggleGreen();
 8000d66:	f000 fda7 	bl	80018b8 <toggleGreen>
			}
			//check if user want to apply new duration1 and return auto mode
			if(isButtonPressed(RETURN)) {
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fa24 	bl	80001b8 <isButtonPressed>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d015      	beq.n	8000da2 <fsm_setting_time+0x1ba>
				clearAllLed();
 8000d76:	f000 fdad 	bl	80018d4 <clearAllLed>
				//set new duration1 for green led
				green_duration = time_input * 1000;
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <fsm_setting_time+0x24c>)
 8000d88:	6013      	str	r3, [r2, #0]
				time_input = 1;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <fsm_setting_time+0x23c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
				//turn on return flag for the fsm auto can change it's state
				returnFlag1 = BACK_TO_AUTOMATIC;
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <fsm_setting_time+0x250>)
 8000d92:	2210      	movs	r2, #16
 8000d94:	601a      	str	r2, [r3, #0]
				returnFlag2 = BACK_TO_AUTOMATIC;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <fsm_setting_time+0x254>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	601a      	str	r2, [r3, #0]
				status3 = WAIT;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <fsm_setting_time+0x230>)
 8000d9e:	220f      	movs	r2, #15
 8000da0:	601a      	str	r2, [r3, #0]
			}

			//check if user want to increase time
			if(isButtonPressed(SET_TIME)) {
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fa08 	bl	80001b8 <isButtonPressed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d015      	beq.n	8000dda <fsm_setting_time+0x1f2>
				time_input = (time_input + 1) % 100; //99 is the max value
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <fsm_setting_time+0x23c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <fsm_setting_time+0x244>)
 8000db6:	fb83 1302 	smull	r1, r3, r3, r2
 8000dba:	1159      	asrs	r1, r3, #5
 8000dbc:	17d3      	asrs	r3, r2, #31
 8000dbe:	1acb      	subs	r3, r1, r3
 8000dc0:	2164      	movs	r1, #100	; 0x64
 8000dc2:	fb01 f303 	mul.w	r3, r1, r3
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <fsm_setting_time+0x23c>)
 8000dca:	6013      	str	r3, [r2, #0]
				if(time_input == 0) time_input = 1; //1 is invalid value
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <fsm_setting_time+0x23c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <fsm_setting_time+0x1f2>
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <fsm_setting_time+0x23c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
			}

			//check if user want to change mode
			if(isButtonPressed(CONTROL_MODE)){
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff f9ec 	bl	80001b8 <isButtonPressed>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d014      	beq.n	8000e10 <fsm_setting_time+0x228>
				time_input = 1;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <fsm_setting_time+0x23c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000dec:	f000 fd72 	bl	80018d4 <clearAllLed>
				returnFlag1 = BACK_TO_AUTOMATIC;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <fsm_setting_time+0x250>)
 8000df2:	2210      	movs	r2, #16
 8000df4:	601a      	str	r2, [r3, #0]
				returnFlag2 = BACK_TO_AUTOMATIC;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <fsm_setting_time+0x254>)
 8000df8:	2210      	movs	r2, #16
 8000dfa:	601a      	str	r2, [r3, #0]
				status3 = WAIT;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <fsm_setting_time+0x230>)
 8000dfe:	220f      	movs	r2, #15
 8000e00:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e02:	e005      	b.n	8000e10 <fsm_setting_time+0x228>
		case WAIT:
			//DO NOTHING
			break;

		default:
			break;
 8000e04:	bf00      	nop
 8000e06:	e004      	b.n	8000e12 <fsm_setting_time+0x22a>
			break;
 8000e08:	bf00      	nop
 8000e0a:	e002      	b.n	8000e12 <fsm_setting_time+0x22a>
			break;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <fsm_setting_time+0x22a>
			break;
 8000e10:	bf00      	nop
	}
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000060 	.word	0x20000060
 8000e1c:	20000074 	.word	0x20000074
 8000e20:	2000013c 	.word	0x2000013c
 8000e24:	20000070 	.word	0x20000070
 8000e28:	20000064 	.word	0x20000064
 8000e2c:	51eb851f 	.word	0x51eb851f
 8000e30:	20000068 	.word	0x20000068
 8000e34:	2000006c 	.word	0x2000006c
 8000e38:	200000b8 	.word	0x200000b8
 8000e3c:	200000bc 	.word	0x200000bc

08000e40 <systemInit>:
int timeCountdown2 = 0;

int returnFlag1 = 0;
int returnFlag2 = 0;

void systemInit(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	clearAllButtons();
 8000e44:	f7ff f982 	bl	800014c <clearAllButtons>
	clear7SEG();
 8000e48:	f000 fbbc 	bl	80015c4 <clear7SEG>
	clearAllLed();
 8000e4c:	f000 fd42 	bl	80018d4 <clearAllLed>
	setTimer(4, 100);
 8000e50:	2164      	movs	r1, #100	; 0x64
 8000e52:	2004      	movs	r0, #4
 8000e54:	f000 fe88 	bl	8001b68 <setTimer>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <systemInit+0x70>)
 8000e60:	f001 fa85 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <systemInit+0x70>)
 8000e6c:	f001 fa7f 	bl	800236e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2101      	movs	r1, #1
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <systemInit+0x74>)
 8000e76:	f001 fa7a 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <systemInit+0x74>)
 8000e80:	f001 fa75 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <systemInit+0x74>)
 8000e8a:	f001 fa70 	bl	800236e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2108      	movs	r1, #8
 8000e92:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <systemInit+0x74>)
 8000e94:	f001 fa6b 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <systemInit+0x74>)
 8000e9e:	f001 fa66 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <systemInit+0x74>)
 8000ea8:	f001 fa61 	bl	800236e <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <display7SEG>:
 */

#include "led7_segment.h"

void display7SEG(int num)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	f200 8190 	bhi.w	80011e8 <display7SEG+0x330>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <display7SEG+0x18>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ef5 	.word	0x08000ef5
 8000ed4:	08000f49 	.word	0x08000f49
 8000ed8:	08000f9d 	.word	0x08000f9d
 8000edc:	08000ff1 	.word	0x08000ff1
 8000ee0:	08001045 	.word	0x08001045
 8000ee4:	08001099 	.word	0x08001099
 8000ee8:	080010ed 	.word	0x080010ed
 8000eec:	08001141 	.word	0x08001141
 8000ef0:	08001195 	.word	0x08001195
	switch (num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	48d2      	ldr	r0, [pc, #840]	; (8001244 <display7SEG+0x38c>)
 8000efa:	f001 fa38 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f04:	48cf      	ldr	r0, [pc, #828]	; (8001244 <display7SEG+0x38c>)
 8000f06:	f001 fa32 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	48cc      	ldr	r0, [pc, #816]	; (8001244 <display7SEG+0x38c>)
 8000f12:	f001 fa2c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	48c9      	ldr	r0, [pc, #804]	; (8001244 <display7SEG+0x38c>)
 8000f1e:	f001 fa26 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f28:	48c6      	ldr	r0, [pc, #792]	; (8001244 <display7SEG+0x38c>)
 8000f2a:	f001 fa20 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f34:	48c3      	ldr	r0, [pc, #780]	; (8001244 <display7SEG+0x38c>)
 8000f36:	f001 fa1a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	48c0      	ldr	r0, [pc, #768]	; (8001244 <display7SEG+0x38c>)
 8000f42:	f001 fa14 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8000f46:	e179      	b.n	800123c <display7SEG+0x384>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	48bd      	ldr	r0, [pc, #756]	; (8001244 <display7SEG+0x38c>)
 8000f4e:	f001 fa0e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	48ba      	ldr	r0, [pc, #744]	; (8001244 <display7SEG+0x38c>)
 8000f5a:	f001 fa08 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	48b7      	ldr	r0, [pc, #732]	; (8001244 <display7SEG+0x38c>)
 8000f66:	f001 fa02 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	48b4      	ldr	r0, [pc, #720]	; (8001244 <display7SEG+0x38c>)
 8000f72:	f001 f9fc 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	48b1      	ldr	r0, [pc, #708]	; (8001244 <display7SEG+0x38c>)
 8000f7e:	f001 f9f6 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	48ae      	ldr	r0, [pc, #696]	; (8001244 <display7SEG+0x38c>)
 8000f8a:	f001 f9f0 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	48ab      	ldr	r0, [pc, #684]	; (8001244 <display7SEG+0x38c>)
 8000f96:	f001 f9ea 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8000f9a:	e14f      	b.n	800123c <display7SEG+0x384>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	48a8      	ldr	r0, [pc, #672]	; (8001244 <display7SEG+0x38c>)
 8000fa2:	f001 f9e4 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	48a5      	ldr	r0, [pc, #660]	; (8001244 <display7SEG+0x38c>)
 8000fae:	f001 f9de 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	48a2      	ldr	r0, [pc, #648]	; (8001244 <display7SEG+0x38c>)
 8000fba:	f001 f9d8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	489f      	ldr	r0, [pc, #636]	; (8001244 <display7SEG+0x38c>)
 8000fc6:	f001 f9d2 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd0:	489c      	ldr	r0, [pc, #624]	; (8001244 <display7SEG+0x38c>)
 8000fd2:	f001 f9cc 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	4899      	ldr	r0, [pc, #612]	; (8001244 <display7SEG+0x38c>)
 8000fde:	f001 f9c6 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	4896      	ldr	r0, [pc, #600]	; (8001244 <display7SEG+0x38c>)
 8000fea:	f001 f9c0 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8000fee:	e125      	b.n	800123c <display7SEG+0x384>
		  case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4893      	ldr	r0, [pc, #588]	; (8001244 <display7SEG+0x38c>)
 8000ff6:	f001 f9ba 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	4890      	ldr	r0, [pc, #576]	; (8001244 <display7SEG+0x38c>)
 8001002:	f001 f9b4 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	488d      	ldr	r0, [pc, #564]	; (8001244 <display7SEG+0x38c>)
 800100e:	f001 f9ae 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	488a      	ldr	r0, [pc, #552]	; (8001244 <display7SEG+0x38c>)
 800101a:	f001 f9a8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001024:	4887      	ldr	r0, [pc, #540]	; (8001244 <display7SEG+0x38c>)
 8001026:	f001 f9a2 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4884      	ldr	r0, [pc, #528]	; (8001244 <display7SEG+0x38c>)
 8001032:	f001 f99c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4881      	ldr	r0, [pc, #516]	; (8001244 <display7SEG+0x38c>)
 800103e:	f001 f996 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001042:	e0fb      	b.n	800123c <display7SEG+0x384>
		  case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	487e      	ldr	r0, [pc, #504]	; (8001244 <display7SEG+0x38c>)
 800104a:	f001 f990 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	487b      	ldr	r0, [pc, #492]	; (8001244 <display7SEG+0x38c>)
 8001056:	f001 f98a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001060:	4878      	ldr	r0, [pc, #480]	; (8001244 <display7SEG+0x38c>)
 8001062:	f001 f984 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4875      	ldr	r0, [pc, #468]	; (8001244 <display7SEG+0x38c>)
 800106e:	f001 f97e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001078:	4872      	ldr	r0, [pc, #456]	; (8001244 <display7SEG+0x38c>)
 800107a:	f001 f978 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001084:	486f      	ldr	r0, [pc, #444]	; (8001244 <display7SEG+0x38c>)
 8001086:	f001 f972 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	486c      	ldr	r0, [pc, #432]	; (8001244 <display7SEG+0x38c>)
 8001092:	f001 f96c 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001096:	e0d1      	b.n	800123c <display7SEG+0x384>
		  case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	4869      	ldr	r0, [pc, #420]	; (8001244 <display7SEG+0x38c>)
 800109e:	f001 f966 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	4866      	ldr	r0, [pc, #408]	; (8001244 <display7SEG+0x38c>)
 80010aa:	f001 f960 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	4863      	ldr	r0, [pc, #396]	; (8001244 <display7SEG+0x38c>)
 80010b6:	f001 f95a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c0:	4860      	ldr	r0, [pc, #384]	; (8001244 <display7SEG+0x38c>)
 80010c2:	f001 f954 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010cc:	485d      	ldr	r0, [pc, #372]	; (8001244 <display7SEG+0x38c>)
 80010ce:	f001 f94e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	485a      	ldr	r0, [pc, #360]	; (8001244 <display7SEG+0x38c>)
 80010da:	f001 f948 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e4:	4857      	ldr	r0, [pc, #348]	; (8001244 <display7SEG+0x38c>)
 80010e6:	f001 f942 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80010ea:	e0a7      	b.n	800123c <display7SEG+0x384>
		  case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <display7SEG+0x38c>)
 80010f2:	f001 f93c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fc:	4851      	ldr	r0, [pc, #324]	; (8001244 <display7SEG+0x38c>)
 80010fe:	f001 f936 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001108:	484e      	ldr	r0, [pc, #312]	; (8001244 <display7SEG+0x38c>)
 800110a:	f001 f930 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	484b      	ldr	r0, [pc, #300]	; (8001244 <display7SEG+0x38c>)
 8001116:	f001 f92a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001120:	4848      	ldr	r0, [pc, #288]	; (8001244 <display7SEG+0x38c>)
 8001122:	f001 f924 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112c:	4845      	ldr	r0, [pc, #276]	; (8001244 <display7SEG+0x38c>)
 800112e:	f001 f91e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4842      	ldr	r0, [pc, #264]	; (8001244 <display7SEG+0x38c>)
 800113a:	f001 f918 	bl	800236e <HAL_GPIO_WritePin>
			break;
 800113e:	e07d      	b.n	800123c <display7SEG+0x384>
		  case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	483f      	ldr	r0, [pc, #252]	; (8001244 <display7SEG+0x38c>)
 8001146:	f001 f912 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	483c      	ldr	r0, [pc, #240]	; (8001244 <display7SEG+0x38c>)
 8001152:	f001 f90c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	4839      	ldr	r0, [pc, #228]	; (8001244 <display7SEG+0x38c>)
 800115e:	f001 f906 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001168:	4836      	ldr	r0, [pc, #216]	; (8001244 <display7SEG+0x38c>)
 800116a:	f001 f900 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4833      	ldr	r0, [pc, #204]	; (8001244 <display7SEG+0x38c>)
 8001176:	f001 f8fa 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	4830      	ldr	r0, [pc, #192]	; (8001244 <display7SEG+0x38c>)
 8001182:	f001 f8f4 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	482d      	ldr	r0, [pc, #180]	; (8001244 <display7SEG+0x38c>)
 800118e:	f001 f8ee 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001192:	e053      	b.n	800123c <display7SEG+0x384>
		  case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	482a      	ldr	r0, [pc, #168]	; (8001244 <display7SEG+0x38c>)
 800119a:	f001 f8e8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a4:	4827      	ldr	r0, [pc, #156]	; (8001244 <display7SEG+0x38c>)
 80011a6:	f001 f8e2 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <display7SEG+0x38c>)
 80011b2:	f001 f8dc 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <display7SEG+0x38c>)
 80011be:	f001 f8d6 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	481e      	ldr	r0, [pc, #120]	; (8001244 <display7SEG+0x38c>)
 80011ca:	f001 f8d0 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d4:	481b      	ldr	r0, [pc, #108]	; (8001244 <display7SEG+0x38c>)
 80011d6:	f001 f8ca 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <display7SEG+0x38c>)
 80011e2:	f001 f8c4 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80011e6:	e029      	b.n	800123c <display7SEG+0x384>
		  default:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	4815      	ldr	r0, [pc, #84]	; (8001244 <display7SEG+0x38c>)
 80011ee:	f001 f8be 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <display7SEG+0x38c>)
 80011fa:	f001 f8b8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <display7SEG+0x38c>)
 8001206:	f001 f8b2 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <display7SEG+0x38c>)
 8001212:	f001 f8ac 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <display7SEG+0x38c>)
 800121e:	f001 f8a6 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <display7SEG+0x38c>)
 800122a:	f001 f8a0 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <display7SEG+0x38c>)
 8001236:	f001 f89a 	bl	800236e <HAL_GPIO_WritePin>
			break;
 800123a:	bf00      	nop
	}
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010800 	.word	0x40010800

08001248 <display7SEG_1>:

void display7SEG_1(int num)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b08      	cmp	r3, #8
 8001254:	f200 8187 	bhi.w	8001566 <display7SEG_1+0x31e>
 8001258:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <display7SEG_1+0x18>)
 800125a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125e:	bf00      	nop
 8001260:	08001285 	.word	0x08001285
 8001264:	080012d7 	.word	0x080012d7
 8001268:	08001329 	.word	0x08001329
 800126c:	0800137b 	.word	0x0800137b
 8001270:	080013cd 	.word	0x080013cd
 8001274:	0800141f 	.word	0x0800141f
 8001278:	08001471 	.word	0x08001471
 800127c:	080014c3 	.word	0x080014c3
 8001280:	08001515 	.word	0x08001515
	switch (num)
	{
		case 0:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	48cd      	ldr	r0, [pc, #820]	; (80015c0 <display7SEG_1+0x378>)
 800128a:	f001 f870 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <display7SEG_1+0x378>)
 8001294:	f001 f86b 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129e:	48c8      	ldr	r0, [pc, #800]	; (80015c0 <display7SEG_1+0x378>)
 80012a0:	f001 f865 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012aa:	48c5      	ldr	r0, [pc, #788]	; (80015c0 <display7SEG_1+0x378>)
 80012ac:	f001 f85f 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b6:	48c2      	ldr	r0, [pc, #776]	; (80015c0 <display7SEG_1+0x378>)
 80012b8:	f001 f859 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	48bf      	ldr	r0, [pc, #764]	; (80015c0 <display7SEG_1+0x378>)
 80012c4:	f001 f853 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	48bc      	ldr	r0, [pc, #752]	; (80015c0 <display7SEG_1+0x378>)
 80012d0:	f001 f84d 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80012d4:	e170      	b.n	80015b8 <display7SEG_1+0x370>
		case 1:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	48b9      	ldr	r0, [pc, #740]	; (80015c0 <display7SEG_1+0x378>)
 80012dc:	f001 f847 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	48b6      	ldr	r0, [pc, #728]	; (80015c0 <display7SEG_1+0x378>)
 80012e6:	f001 f842 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	48b3      	ldr	r0, [pc, #716]	; (80015c0 <display7SEG_1+0x378>)
 80012f2:	f001 f83c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	48b0      	ldr	r0, [pc, #704]	; (80015c0 <display7SEG_1+0x378>)
 80012fe:	f001 f836 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001308:	48ad      	ldr	r0, [pc, #692]	; (80015c0 <display7SEG_1+0x378>)
 800130a:	f001 f830 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	48aa      	ldr	r0, [pc, #680]	; (80015c0 <display7SEG_1+0x378>)
 8001316:	f001 f82a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001320:	48a7      	ldr	r0, [pc, #668]	; (80015c0 <display7SEG_1+0x378>)
 8001322:	f001 f824 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001326:	e147      	b.n	80015b8 <display7SEG_1+0x370>
		case 2:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	48a4      	ldr	r0, [pc, #656]	; (80015c0 <display7SEG_1+0x378>)
 800132e:	f001 f81e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	48a2      	ldr	r0, [pc, #648]	; (80015c0 <display7SEG_1+0x378>)
 8001338:	f001 f819 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	489f      	ldr	r0, [pc, #636]	; (80015c0 <display7SEG_1+0x378>)
 8001344:	f001 f813 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	489c      	ldr	r0, [pc, #624]	; (80015c0 <display7SEG_1+0x378>)
 8001350:	f001 f80d 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	4899      	ldr	r0, [pc, #612]	; (80015c0 <display7SEG_1+0x378>)
 800135c:	f001 f807 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4896      	ldr	r0, [pc, #600]	; (80015c0 <display7SEG_1+0x378>)
 8001368:	f001 f801 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001372:	4893      	ldr	r0, [pc, #588]	; (80015c0 <display7SEG_1+0x378>)
 8001374:	f000 fffb 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001378:	e11e      	b.n	80015b8 <display7SEG_1+0x370>
		  case 3:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	4890      	ldr	r0, [pc, #576]	; (80015c0 <display7SEG_1+0x378>)
 8001380:	f000 fff5 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	488d      	ldr	r0, [pc, #564]	; (80015c0 <display7SEG_1+0x378>)
 800138a:	f000 fff0 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	488a      	ldr	r0, [pc, #552]	; (80015c0 <display7SEG_1+0x378>)
 8001396:	f000 ffea 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	4887      	ldr	r0, [pc, #540]	; (80015c0 <display7SEG_1+0x378>)
 80013a2:	f000 ffe4 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	4884      	ldr	r0, [pc, #528]	; (80015c0 <display7SEG_1+0x378>)
 80013ae:	f000 ffde 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b8:	4881      	ldr	r0, [pc, #516]	; (80015c0 <display7SEG_1+0x378>)
 80013ba:	f000 ffd8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c4:	487e      	ldr	r0, [pc, #504]	; (80015c0 <display7SEG_1+0x378>)
 80013c6:	f000 ffd2 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80013ca:	e0f5      	b.n	80015b8 <display7SEG_1+0x370>
		  case 4:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	487b      	ldr	r0, [pc, #492]	; (80015c0 <display7SEG_1+0x378>)
 80013d2:	f000 ffcc 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	4879      	ldr	r0, [pc, #484]	; (80015c0 <display7SEG_1+0x378>)
 80013dc:	f000 ffc7 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	4876      	ldr	r0, [pc, #472]	; (80015c0 <display7SEG_1+0x378>)
 80013e8:	f000 ffc1 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f2:	4873      	ldr	r0, [pc, #460]	; (80015c0 <display7SEG_1+0x378>)
 80013f4:	f000 ffbb 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	4870      	ldr	r0, [pc, #448]	; (80015c0 <display7SEG_1+0x378>)
 8001400:	f000 ffb5 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <display7SEG_1+0x378>)
 800140c:	f000 ffaf 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001416:	486a      	ldr	r0, [pc, #424]	; (80015c0 <display7SEG_1+0x378>)
 8001418:	f000 ffa9 	bl	800236e <HAL_GPIO_WritePin>
			break;
 800141c:	e0cc      	b.n	80015b8 <display7SEG_1+0x370>
		  case 5:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	4867      	ldr	r0, [pc, #412]	; (80015c0 <display7SEG_1+0x378>)
 8001424:	f000 ffa3 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	4864      	ldr	r0, [pc, #400]	; (80015c0 <display7SEG_1+0x378>)
 800142e:	f000 ff9e 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001438:	4861      	ldr	r0, [pc, #388]	; (80015c0 <display7SEG_1+0x378>)
 800143a:	f000 ff98 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001444:	485e      	ldr	r0, [pc, #376]	; (80015c0 <display7SEG_1+0x378>)
 8001446:	f000 ff92 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001450:	485b      	ldr	r0, [pc, #364]	; (80015c0 <display7SEG_1+0x378>)
 8001452:	f000 ff8c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145c:	4858      	ldr	r0, [pc, #352]	; (80015c0 <display7SEG_1+0x378>)
 800145e:	f000 ff86 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <display7SEG_1+0x378>)
 800146a:	f000 ff80 	bl	800236e <HAL_GPIO_WritePin>
			break;
 800146e:	e0a3      	b.n	80015b8 <display7SEG_1+0x370>
		  case 6:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <display7SEG_1+0x378>)
 8001476:	f000 ff7a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <display7SEG_1+0x378>)
 8001480:	f000 ff75 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148a:	484d      	ldr	r0, [pc, #308]	; (80015c0 <display7SEG_1+0x378>)
 800148c:	f000 ff6f 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	484a      	ldr	r0, [pc, #296]	; (80015c0 <display7SEG_1+0x378>)
 8001498:	f000 ff69 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4847      	ldr	r0, [pc, #284]	; (80015c0 <display7SEG_1+0x378>)
 80014a4:	f000 ff63 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ae:	4844      	ldr	r0, [pc, #272]	; (80015c0 <display7SEG_1+0x378>)
 80014b0:	f000 ff5d 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ba:	4841      	ldr	r0, [pc, #260]	; (80015c0 <display7SEG_1+0x378>)
 80014bc:	f000 ff57 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80014c0:	e07a      	b.n	80015b8 <display7SEG_1+0x370>
		  case 7:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2140      	movs	r1, #64	; 0x40
 80014c6:	483e      	ldr	r0, [pc, #248]	; (80015c0 <display7SEG_1+0x378>)
 80014c8:	f000 ff51 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	483b      	ldr	r0, [pc, #236]	; (80015c0 <display7SEG_1+0x378>)
 80014d2:	f000 ff4c 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4838      	ldr	r0, [pc, #224]	; (80015c0 <display7SEG_1+0x378>)
 80014de:	f000 ff46 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	4835      	ldr	r0, [pc, #212]	; (80015c0 <display7SEG_1+0x378>)
 80014ea:	f000 ff40 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f4:	4832      	ldr	r0, [pc, #200]	; (80015c0 <display7SEG_1+0x378>)
 80014f6:	f000 ff3a 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	482f      	ldr	r0, [pc, #188]	; (80015c0 <display7SEG_1+0x378>)
 8001502:	f000 ff34 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150c:	482c      	ldr	r0, [pc, #176]	; (80015c0 <display7SEG_1+0x378>)
 800150e:	f000 ff2e 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001512:	e051      	b.n	80015b8 <display7SEG_1+0x370>
		  case 8:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4829      	ldr	r0, [pc, #164]	; (80015c0 <display7SEG_1+0x378>)
 800151a:	f000 ff28 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	4827      	ldr	r0, [pc, #156]	; (80015c0 <display7SEG_1+0x378>)
 8001524:	f000 ff23 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152e:	4824      	ldr	r0, [pc, #144]	; (80015c0 <display7SEG_1+0x378>)
 8001530:	f000 ff1d 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153a:	4821      	ldr	r0, [pc, #132]	; (80015c0 <display7SEG_1+0x378>)
 800153c:	f000 ff17 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001546:	481e      	ldr	r0, [pc, #120]	; (80015c0 <display7SEG_1+0x378>)
 8001548:	f000 ff11 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <display7SEG_1+0x378>)
 8001554:	f000 ff0b 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <display7SEG_1+0x378>)
 8001560:	f000 ff05 	bl	800236e <HAL_GPIO_WritePin>
			break;
 8001564:	e028      	b.n	80015b8 <display7SEG_1+0x370>
		  default:
			HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <display7SEG_1+0x378>)
 800156c:	f000 feff 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <display7SEG_1+0x378>)
 8001576:	f000 fefa 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <display7SEG_1+0x378>)
 8001582:	f000 fef4 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <display7SEG_1+0x378>)
 800158e:	f000 feee 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <display7SEG_1+0x378>)
 800159a:	f000 fee8 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <display7SEG_1+0x378>)
 80015a6:	f000 fee2 	bl	800236e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <display7SEG_1+0x378>)
 80015b2:	f000 fedc 	bl	800236e <HAL_GPIO_WritePin>
			break;
 80015b6:	bf00      	nop
	}
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <clear7SEG>:

void clear7SEG() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <clear7SEG+0xac>)
 80015ce:	f000 fece 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4825      	ldr	r0, [pc, #148]	; (8001670 <clear7SEG+0xac>)
 80015da:	f000 fec8 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e4:	4822      	ldr	r0, [pc, #136]	; (8001670 <clear7SEG+0xac>)
 80015e6:	f000 fec2 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f0:	481f      	ldr	r0, [pc, #124]	; (8001670 <clear7SEG+0xac>)
 80015f2:	f000 febc 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fc:	481c      	ldr	r0, [pc, #112]	; (8001670 <clear7SEG+0xac>)
 80015fe:	f000 feb6 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <clear7SEG+0xac>)
 800160a:	f000 feb0 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001614:	4816      	ldr	r0, [pc, #88]	; (8001670 <clear7SEG+0xac>)
 8001616:	f000 feaa 	bl	800236e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG0_1_GPIO_Port, SEG0_1_Pin, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <clear7SEG+0xb0>)
 8001620:	f000 fea5 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_1_GPIO_Port, SEG1_1_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <clear7SEG+0xb0>)
 800162a:	f000 fea0 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <clear7SEG+0xb0>)
 8001636:	f000 fe9a 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_1_GPIO_Port, SEG3_1_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <clear7SEG+0xb0>)
 8001642:	f000 fe94 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_1_GPIO_Port, SEG4_1_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <clear7SEG+0xb0>)
 800164e:	f000 fe8e 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_1_GPIO_Port, SEG5_1_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <clear7SEG+0xb0>)
 800165a:	f000 fe88 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_1_GPIO_Port, SEG6_1_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <clear7SEG+0xb0>)
 8001666:	f000 fe82 	bl	800236e <HAL_GPIO_WritePin>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00

08001678 <update7Segment>:
int * set1;
int * set2;

int led_index = 0;

void update7Segment(){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	if(timer_flag[4] == 1){
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <update7Segment+0xe8>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d16a      	bne.n	800175a <update7Segment+0xe2>
		setTimer(4, 100);
 8001684:	2164      	movs	r1, #100	; 0x64
 8001686:	2004      	movs	r0, #4
 8001688:	f000 fa6e 	bl	8001b68 <setTimer>
		switch (led_index) {
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <update7Segment+0xec>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <update7Segment+0x22>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d02a      	beq.n	80016ee <update7Segment+0x76>
				display7SEG_1(*set2 / 10);
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
				break;
			default:
				break;
 8001698:	e053      	b.n	8001742 <update7Segment+0xca>
				display7SEG(*set1 % 10);
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <update7Segment+0xf0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <update7Segment+0xf4>)
 80016a2:	fb83 1302 	smull	r1, r3, r3, r2
 80016a6:	1099      	asrs	r1, r3, #2
 80016a8:	17d3      	asrs	r3, r2, #31
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	460b      	mov	r3, r1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	1ad1      	subs	r1, r2, r3
 80016b6:	4608      	mov	r0, r1
 80016b8:	f7ff fbfe 	bl	8000eb8 <display7SEG>
				display7SEG_1(*set1 / 10);
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <update7Segment+0xf0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2a      	ldr	r2, [pc, #168]	; (800176c <update7Segment+0xf4>)
 80016c4:	fb82 1203 	smull	r1, r2, r2, r3
 80016c8:	1092      	asrs	r2, r2, #2
 80016ca:	17db      	asrs	r3, r3, #31
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fdba 	bl	8001248 <display7SEG_1>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016da:	4825      	ldr	r0, [pc, #148]	; (8001770 <update7Segment+0xf8>)
 80016dc:	f000 fe47 	bl	800236e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <update7Segment+0xf8>)
 80016e8:	f000 fe41 	bl	800236e <HAL_GPIO_WritePin>
				break;
 80016ec:	e029      	b.n	8001742 <update7Segment+0xca>
				display7SEG(*set2 % 10);
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <update7Segment+0xfc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <update7Segment+0xf4>)
 80016f6:	fb83 1302 	smull	r1, r3, r3, r2
 80016fa:	1099      	asrs	r1, r3, #2
 80016fc:	17d3      	asrs	r3, r2, #31
 80016fe:	1ac9      	subs	r1, r1, r3
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	1ad1      	subs	r1, r2, r3
 800170a:	4608      	mov	r0, r1
 800170c:	f7ff fbd4 	bl	8000eb8 <display7SEG>
				display7SEG_1(*set2 / 10);
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <update7Segment+0xfc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <update7Segment+0xf4>)
 8001718:	fb82 1203 	smull	r1, r2, r2, r3
 800171c:	1092      	asrs	r2, r2, #2
 800171e:	17db      	asrs	r3, r3, #31
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd90 	bl	8001248 <display7SEG_1>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <update7Segment+0xf8>)
 8001730:	f000 fe1d 	bl	800236e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <update7Segment+0xf8>)
 800173c:	f000 fe17 	bl	800236e <HAL_GPIO_WritePin>
				break;
 8001740:	bf00      	nop
		}
		led_index++;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <update7Segment+0xec>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <update7Segment+0xec>)
 800174a:	6013      	str	r3, [r2, #0]
		if(led_index >= 2) {
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <update7Segment+0xec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	dd02      	ble.n	800175a <update7Segment+0xe2>
			led_index = 0;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <update7Segment+0xec>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
		}
	}
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000013c 	.word	0x2000013c
 8001764:	200000c0 	.word	0x200000c0
 8001768:	200000c8 	.word	0x200000c8
 800176c:	66666667 	.word	0x66666667
 8001770:	40010800 	.word	0x40010800
 8001774:	200000c4 	.word	0x200000c4

08001778 <setRedLed1>:
 *      Author: nhanvo
 */

#include "light_traffic.h"

void setRedLed1(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2101      	movs	r1, #1
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <setRedLed1+0x28>)
 8001782:	f000 fdf4 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2104      	movs	r1, #4
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <setRedLed1+0x28>)
 800178c:	f000 fdef 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2102      	movs	r1, #2
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <setRedLed1+0x28>)
 8001796:	f000 fdea 	bl	800236e <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <setYellowLed1>:

void setYellowLed1(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2101      	movs	r1, #1
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <setYellowLed1+0x28>)
 80017ae:	f000 fdde 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2104      	movs	r1, #4
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <setYellowLed1+0x28>)
 80017b8:	f000 fdd9 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2102      	movs	r1, #2
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <setYellowLed1+0x28>)
 80017c2:	f000 fdd4 	bl	800236e <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40010c00 	.word	0x40010c00

080017d0 <setGreenLed1>:

void setGreenLed1(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <setGreenLed1+0x28>)
 80017da:	f000 fdc8 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2104      	movs	r1, #4
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <setGreenLed1+0x28>)
 80017e4:	f000 fdc3 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2102      	movs	r1, #2
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <setGreenLed1+0x28>)
 80017ee:	f000 fdbe 	bl	800236e <HAL_GPIO_WritePin>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40010c00 	.word	0x40010c00

080017fc <setRedLed2>:

void setRedLed2(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2108      	movs	r1, #8
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <setRedLed2+0x28>)
 8001806:	f000 fdb2 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <setRedLed2+0x28>)
 8001810:	f000 fdad 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2110      	movs	r1, #16
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <setRedLed2+0x28>)
 800181a:	f000 fda8 	bl	800236e <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010c00 	.word	0x40010c00

08001828 <setYellowLed2>:

void setYellowLed2(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2108      	movs	r1, #8
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <setYellowLed2+0x28>)
 8001832:	f000 fd9c 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <setYellowLed2+0x28>)
 800183c:	f000 fd97 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2110      	movs	r1, #16
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <setYellowLed2+0x28>)
 8001846:	f000 fd92 	bl	800236e <HAL_GPIO_WritePin>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010c00 	.word	0x40010c00

08001854 <setGreenLed2>:

void setGreenLed2(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2108      	movs	r1, #8
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <setGreenLed2+0x28>)
 800185e:	f000 fd86 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2120      	movs	r1, #32
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <setGreenLed2+0x28>)
 8001868:	f000 fd81 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2110      	movs	r1, #16
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <setGreenLed2+0x28>)
 8001872:	f000 fd7c 	bl	800236e <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010c00 	.word	0x40010c00

08001880 <toggleRed>:

void toggleRed(){
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8001884:	2101      	movs	r1, #1
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <toggleRed+0x18>)
 8001888:	f000 fd89 	bl	800239e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 800188c:	2108      	movs	r1, #8
 800188e:	4802      	ldr	r0, [pc, #8]	; (8001898 <toggleRed+0x18>)
 8001890:	f000 fd85 	bl	800239e <HAL_GPIO_TogglePin>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010c00 	.word	0x40010c00

0800189c <toggleYellow>:
void toggleYellow(){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 80018a0:	2102      	movs	r1, #2
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <toggleYellow+0x18>)
 80018a4:	f000 fd7b 	bl	800239e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 80018a8:	2110      	movs	r1, #16
 80018aa:	4802      	ldr	r0, [pc, #8]	; (80018b4 <toggleYellow+0x18>)
 80018ac:	f000 fd77 	bl	800239e <HAL_GPIO_TogglePin>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <toggleGreen>:
void toggleGreen(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 80018bc:	2104      	movs	r1, #4
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <toggleGreen+0x18>)
 80018c0:	f000 fd6d 	bl	800239e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 80018c4:	2120      	movs	r1, #32
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <toggleGreen+0x18>)
 80018c8:	f000 fd69 	bl	800239e <HAL_GPIO_TogglePin>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <clearAllLed>:


void clearAllLed(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2101      	movs	r1, #1
 80018dc:	480e      	ldr	r0, [pc, #56]	; (8001918 <clearAllLed+0x44>)
 80018de:	f000 fd46 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2104      	movs	r1, #4
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <clearAllLed+0x44>)
 80018e8:	f000 fd41 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <clearAllLed+0x44>)
 80018f2:	f000 fd3c 	bl	800236e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2108      	movs	r1, #8
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <clearAllLed+0x44>)
 80018fc:	f000 fd37 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <clearAllLed+0x44>)
 8001906:	f000 fd32 	bl	800236e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	4802      	ldr	r0, [pc, #8]	; (8001918 <clearAllLed+0x44>)
 8001910:	f000 fd2d 	bl	800236e <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010c00 	.word	0x40010c00

0800191c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001920:	f000 fa24 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001924:	f000 f814 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001928:	f000 f89a 	bl	8001a60 <MX_GPIO_Init>
  MX_TIM2_Init();
 800192c:	f000 f84c 	bl	80019c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <main+0x30>)
 8001932:	f001 f979 	bl	8002c28 <HAL_TIM_Base_Start_IT>
  systemInit();
 8001936:	f7ff fa83 	bl	8000e40 <systemInit>
//	  		if(index_led < 0) {
//	  			index_led = 9;
//	  		}
//	  		display7SEG(index_led--);
//	  	  }
	  fsm_automatic_run1();
 800193a:	f7fe fcf1 	bl	8000320 <fsm_automatic_run1>
	  fsm_automatic_run2();
 800193e:	f7fe ff25 	bl	800078c <fsm_automatic_run2>
	  fsm_setting_time();
 8001942:	f7ff f951 	bl	8000be8 <fsm_setting_time>
	  update7Segment();
 8001946:	f7ff fe97 	bl	8001678 <update7Segment>
	  fsm_automatic_run1();
 800194a:	e7f6      	b.n	800193a <main+0x1e>
 800194c:	200000cc 	.word	0x200000cc

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b090      	sub	sp, #64	; 0x40
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	2228      	movs	r2, #40	; 0x28
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fd12 	bl	8003388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001976:	2301      	movs	r3, #1
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197a:	2310      	movs	r3, #16
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fd22 	bl	80023d0 <HAL_RCC_OscConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001992:	f000 f8e3 	bl	8001b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001996:	230f      	movs	r3, #15
 8001998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 ff8e 	bl	80028d0 <HAL_RCC_ClockConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f8cf 	bl	8001b5c <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3740      	adds	r7, #64	; 0x40
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM2_Init+0x94>)
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_TIM2_Init+0x94>)
 80019ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_TIM2_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_TIM2_Init+0x94>)
 80019fc:	2209      	movs	r2, #9
 80019fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <MX_TIM2_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM2_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0c:	4813      	ldr	r0, [pc, #76]	; (8001a5c <MX_TIM2_Init+0x94>)
 8001a0e:	f001 f8bb 	bl	8002b88 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a18:	f000 f8a0 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM2_Init+0x94>)
 8001a2a:	f001 fa39 	bl	8002ea0 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a34:	f000 f892 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM2_Init+0x94>)
 8001a46:	f001 fc11 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a50:	f000 f884 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200000cc 	.word	0x200000cc

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <MX_GPIO_Init+0xd4>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|SEG0_Pin|SEG1_Pin
 8001abc:	2200      	movs	r2, #0
 8001abe:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001ac2:	481d      	ldr	r0, [pc, #116]	; (8001b38 <MX_GPIO_Init+0xd8>)
 8001ac4:	f000 fc53 	bl	800236e <HAL_GPIO_WritePin>
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|Y1_Pin|G1_Pin|SEG4_1_Pin
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001ace:	481b      	ldr	r0, [pc, #108]	; (8001b3c <MX_GPIO_Init+0xdc>)
 8001ad0:	f000 fc4d 	bl	800236e <HAL_GPIO_WritePin>
                          |SEG5_1_Pin|SEG6_1_Pin|R2_Pin|Y2_Pin
                          |G2_Pin|SEG0_1_Pin|SEG1_1_Pin|SEG2_1_Pin
                          |SEG3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001ad4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4815      	ldr	r0, [pc, #84]	; (8001b40 <MX_GPIO_Init+0xe0>)
 8001aea:	f000 faaf 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|SEG0_Pin|SEG1_Pin
 8001aee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001af2:	613b      	str	r3, [r7, #16]
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	4619      	mov	r1, r3
 8001b06:	480c      	ldr	r0, [pc, #48]	; (8001b38 <MX_GPIO_Init+0xd8>)
 8001b08:	f000 faa0 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin Y1_Pin G1_Pin SEG4_1_Pin
                           SEG5_1_Pin SEG6_1_Pin R2_Pin Y2_Pin
                           G2_Pin SEG0_1_Pin SEG1_1_Pin SEG2_1_Pin
                           SEG3_1_Pin */
  GPIO_InitStruct.Pin = R1_Pin|Y1_Pin|G1_Pin|SEG4_1_Pin
 8001b0c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001b10:	613b      	str	r3, [r7, #16]
                          |SEG5_1_Pin|SEG6_1_Pin|R2_Pin|Y2_Pin
                          |G2_Pin|SEG0_1_Pin|SEG1_1_Pin|SEG2_1_Pin
                          |SEG3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_GPIO_Init+0xdc>)
 8001b26:	f000 fa91 	bl	800204c <HAL_GPIO_Init>

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	40011000 	.word	0x40011000

08001b44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	timerRun();
 8001b4c:	f000 f82a 	bl	8001ba4 <timerRun>
	getKeyInput();
 8001b50:	f7fe fb5c 	bl	800020c <getKeyInput>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <setTimer>:

int timer_flag[MAX_TIMER];
int timer_counter[MAX_TIMER];
int TIMER_CYCLE = 10;

void setTimer(int index, int counter) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <setTimer+0x30>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2100      	movs	r1, #0
 8001b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter/TIMER_CYCLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <setTimer+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b86:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <setTimer+0x38>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	2000013c 	.word	0x2000013c
 8001b9c:	20000078 	.word	0x20000078
 8001ba0:	20000114 	.word	0x20000114

08001ba4 <timerRun>:
void timerRun() {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_TIMER; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	e01c      	b.n	8001bea <timerRun+0x46>
		if(timer_counter[i] > 0) {
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <timerRun+0x58>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	dd08      	ble.n	8001bce <timerRun+0x2a>
			timer_counter[i]--;
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <timerRun+0x58>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <timerRun+0x58>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(timer_counter[i] <= 0) {
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <timerRun+0x58>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dc04      	bgt.n	8001be4 <timerRun+0x40>
			timer_flag[i] = 1;
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <timerRun+0x5c>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2101      	movs	r1, #1
 8001be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_TIMER; i++) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	dddf      	ble.n	8001bb0 <timerRun+0xc>
		}
	}
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000114 	.word	0x20000114
 8001c00:	2000013c 	.word	0x2000013c

08001c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_MspInit+0x5c>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_MspInit+0x60>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_MspInit+0x60>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d113      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_TIM_Base_MspInit+0x44>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	201c      	movs	r0, #28
 8001c98:	f000 f9a1 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9c:	201c      	movs	r0, #28
 8001c9e:	f000 f9ba 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf6:	f000 f87f 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM2_IRQHandler+0x10>)
 8001d06:	f000 ffdb 	bl	8002cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000cc 	.word	0x200000cc

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff fff8 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d3c:	4c09      	ldr	r4, [pc, #36]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f001 faf9 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7ff fde5 	bl	800191c <main>
  bx lr
 8001d52:	4770      	bx	lr
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d5c:	080033dc 	.word	0x080033dc
  ldr r2, =_sbss
 8001d60:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d64:	20000168 	.word	0x20000168

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f923 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff ff3c 	bl	8001c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f93b 	bl	8002032 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f903 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000007c 	.word	0x2000007c
 8001df0:	20000084 	.word	0x20000084
 8001df4:	20000080 	.word	0x20000080

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000084 	.word	0x20000084
 8001e18:	20000164 	.word	0x20000164

08001e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_GetTick+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000164 	.word	0x20000164

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4906      	ldr	r1, [pc, #24]	; (8001ec8 <__NVIC_EnableIRQ+0x34>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff90 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff2d 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff42 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff35 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e148      	b.n	80022f2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002060:	2201      	movs	r2, #1
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8137 	bne.w	80022ec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4aa3      	ldr	r2, [pc, #652]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d05e      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002088:	4aa1      	ldr	r2, [pc, #644]	; (8002310 <HAL_GPIO_Init+0x2c4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d875      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800208e:	4aa1      	ldr	r2, [pc, #644]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d058      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 8002094:	4a9f      	ldr	r2, [pc, #636]	; (8002314 <HAL_GPIO_Init+0x2c8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d86f      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 800209a:	4a9f      	ldr	r2, [pc, #636]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d052      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020a0:	4a9d      	ldr	r2, [pc, #628]	; (8002318 <HAL_GPIO_Init+0x2cc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d869      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020a6:	4a9d      	ldr	r2, [pc, #628]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04c      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020ac:	4a9b      	ldr	r2, [pc, #620]	; (800231c <HAL_GPIO_Init+0x2d0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d863      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020b2:	4a9b      	ldr	r2, [pc, #620]	; (8002320 <HAL_GPIO_Init+0x2d4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d046      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
 80020b8:	4a99      	ldr	r2, [pc, #612]	; (8002320 <HAL_GPIO_Init+0x2d4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d85d      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d82a      	bhi.n	8002118 <HAL_GPIO_Init+0xcc>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d859      	bhi.n	800217a <HAL_GPIO_Init+0x12e>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <HAL_GPIO_Init+0x80>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002147 	.word	0x08002147
 80020d0:	08002121 	.word	0x08002121
 80020d4:	08002133 	.word	0x08002133
 80020d8:	08002175 	.word	0x08002175
 80020dc:	0800217b 	.word	0x0800217b
 80020e0:	0800217b 	.word	0x0800217b
 80020e4:	0800217b 	.word	0x0800217b
 80020e8:	0800217b 	.word	0x0800217b
 80020ec:	0800217b 	.word	0x0800217b
 80020f0:	0800217b 	.word	0x0800217b
 80020f4:	0800217b 	.word	0x0800217b
 80020f8:	0800217b 	.word	0x0800217b
 80020fc:	0800217b 	.word	0x0800217b
 8002100:	0800217b 	.word	0x0800217b
 8002104:	0800217b 	.word	0x0800217b
 8002108:	0800217b 	.word	0x0800217b
 800210c:	0800217b 	.word	0x0800217b
 8002110:	08002129 	.word	0x08002129
 8002114:	0800213d 	.word	0x0800213d
 8002118:	4a82      	ldr	r2, [pc, #520]	; (8002324 <HAL_GPIO_Init+0x2d8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800211e:	e02c      	b.n	800217a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e029      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e024      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	3308      	adds	r3, #8
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e01f      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	330c      	adds	r3, #12
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e01a      	b.n	800217c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800214e:	2304      	movs	r3, #4
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e013      	b.n	800217c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800215c:	2308      	movs	r3, #8
 800215e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	611a      	str	r2, [r3, #16]
          break;
 8002166:	e009      	b.n	800217c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	615a      	str	r2, [r3, #20]
          break;
 8002172:	e003      	b.n	800217c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x130>
          break;
 800217a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d801      	bhi.n	8002186 <HAL_GPIO_Init+0x13a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	e001      	b.n	800218a <HAL_GPIO_Init+0x13e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d802      	bhi.n	8002198 <HAL_GPIO_Init+0x14c>
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x152>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3b08      	subs	r3, #8
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	210f      	movs	r1, #15
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	431a      	orrs	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8090 	beq.w	80022ec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021cc:	4b56      	ldr	r3, [pc, #344]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a55      	ldr	r2, [pc, #340]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_GPIO_Init+0x2dc>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <HAL_GPIO_Init+0x2e0>)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2e8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1dc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_GPIO_Init+0x2ec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1d8>
 8002220:	2302      	movs	r3, #2
 8002222:	e004      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 8002224:	2303      	movs	r3, #3
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_GPIO_Init+0x1e2>
 800222c:	2300      	movs	r3, #0
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800223e:	493b      	ldr	r1, [pc, #236]	; (800232c <HAL_GPIO_Init+0x2e0>)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_GPIO_Init+0x2f0>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_GPIO_Init+0x2f0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	43db      	mvns	r3, r3
 800226e:	4933      	ldr	r1, [pc, #204]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002270:	4013      	ands	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	492d      	ldr	r1, [pc, #180]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	43db      	mvns	r3, r3
 8002296:	4929      	ldr	r1, [pc, #164]	; (800233c <HAL_GPIO_Init+0x2f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4923      	ldr	r1, [pc, #140]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	43db      	mvns	r3, r3
 80022be:	491f      	ldr	r1, [pc, #124]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4919      	ldr	r1, [pc, #100]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4915      	ldr	r1, [pc, #84]	; (800233c <HAL_GPIO_Init+0x2f0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f aeaf 	bne.w	8002060 <HAL_GPIO_Init+0x14>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	372c      	adds	r7, #44	; 0x2c
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	10320000 	.word	0x10320000
 8002314:	10310000 	.word	0x10310000
 8002318:	10220000 	.word	0x10220000
 800231c:	10210000 	.word	0x10210000
 8002320:	10120000 	.word	0x10120000
 8002324:	10110000 	.word	0x10110000
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	40010800 	.word	0x40010800
 8002334:	40010c00 	.word	0x40010c00
 8002338:	40011000 	.word	0x40011000
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237e:	787b      	ldrb	r3, [r7, #1]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002384:	887a      	ldrh	r2, [r7, #2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238a:	e003      	b.n	8002394 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b0:	887a      	ldrh	r2, [r7, #2]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	041a      	lsls	r2, r3, #16
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	400b      	ands	r3, r1
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e26c      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f0:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4b8f      	ldr	r3, [pc, #572]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d112      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
 8002408:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d10b      	bne.n	800242e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	4b89      	ldr	r3, [pc, #548]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06c      	beq.n	80024fc <HAL_RCC_OscConfig+0x12c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d168      	bne.n	80024fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e246      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x76>
 8002438:	4b80      	ldr	r3, [pc, #512]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7f      	ldr	r2, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800243e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	e02e      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7a      	ldr	r2, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b78      	ldr	r3, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a77      	ldr	r2, [pc, #476]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0xbc>
 8002472:	4b72      	ldr	r3, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a71      	ldr	r2, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6e      	ldr	r2, [pc, #440]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xd4>
 800248c:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a67      	ldr	r2, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff fcb6 	bl	8001e1c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fcb2 	bl	8001e1c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1fa      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe4>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff fca2 	bl	8001e1c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fc9e 	bl	8001e1c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1e6      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x10c>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
 8002522:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1ba      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4939      	ldr	r1, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fc57 	bl	8001e1c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff fc53 	bl	8001e1c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e19b      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_RCC_OscConfig+0x270>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fc36 	bl	8001e1c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff fc32 	bl	8001e1c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e17a      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03a      	beq.n	8002654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ec:	f7ff fc16 	bl	8001e1c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff fc12 	bl	8001e1c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e15a      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_RCC_OscConfig+0x26c>)
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f000 fa9a 	bl	8002b4c <RCC_Delay>
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x274>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff fbfc 	bl	8001e1c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002626:	e00f      	b.n	8002648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fbf8 	bl	8001e1c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d908      	bls.n	8002648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e140      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	42420000 	.word	0x42420000
 8002644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b9e      	ldr	r3, [pc, #632]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e9      	bne.n	8002628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a6 	beq.w	80027ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a93      	ldr	r2, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a8a      	ldr	r2, [pc, #552]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fbb9 	bl	8001e1c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fbb5 	bl	8001e1c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0fd      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x312>
 80026d4:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a7a      	ldr	r2, [pc, #488]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x334>
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a72      	ldr	r2, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x356>
 800270c:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a6c      	ldr	r2, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x36e>
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb69 	bl	8001e1c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fb65 	bl	8001e1c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ab      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x37e>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7ff fb53 	bl	8001e1c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff fb4f 	bl	8001e1c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e095      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8081 	beq.w	80028ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b42      	ldr	r3, [pc, #264]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d061      	beq.n	8002888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d146      	bne.n	800285a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7ff fb23 	bl	8001e1c <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027da:	f7ff fb1f 	bl	8001e1c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e067      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d108      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	492d      	ldr	r1, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a19      	ldr	r1, [r3, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	430b      	orrs	r3, r1
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff faf3 	bl	8001e1c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff faef 	bl	8001e1c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e037      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x46a>
 8002858:	e02f      	b.n	80028ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_RCC_OscConfig+0x4fc>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fadc 	bl	8001e1c <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff fad8 	bl	8001e1c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e020      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x498>
 8002886:	e018      	b.n	80028ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	42420060 	.word	0x42420060

080028d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0d0      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d910      	bls.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4965      	ldr	r1, [pc, #404]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d040      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e073      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4936      	ldr	r1, [pc, #216]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7ff fa2c 	bl	8001e1c <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff fa28 	bl	8001e1c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e053      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b27      	ldr	r3, [pc, #156]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d210      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1cc>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f98a 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40022000 	.word	0x40022000
 8002a94:	40021000 	.word	0x40021000
 8002a98:	080033b0 	.word	0x080033b0
 8002a9c:	2000007c 	.word	0x2000007c
 8002aa0:	20000080 	.word	0x20000080

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x36>
 8002ad2:	e027      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad6:	613b      	str	r3, [r7, #16]
      break;
 8002ad8:	e027      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ae4:	5cd3      	ldrb	r3, [r2, r3]
 8002ae6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0c5b      	lsrs	r3, r3, #17
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	fb02 f203 	mul.w	r2, r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e004      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	613b      	str	r3, [r7, #16]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b26:	613b      	str	r3, [r7, #16]
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	693b      	ldr	r3, [r7, #16]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	007a1200 	.word	0x007a1200
 8002b40:	080033c0 	.word	0x080033c0
 8002b44:	080033d0 	.word	0x080033d0
 8002b48:	003d0900 	.word	0x003d0900

08002b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <RCC_Delay+0x34>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <RCC_Delay+0x38>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0a5b      	lsrs	r3, r3, #9
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b68:	bf00      	nop
  }
  while (Delay --);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	60fa      	str	r2, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f9      	bne.n	8002b68 <RCC_Delay+0x1c>
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	2000007c 	.word	0x2000007c
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e041      	b.n	8002c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff f85a 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 fa56 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d001      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e035      	b.n	8002cac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_TIM_Base_Start_IT+0x90>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIM_Base_Start_IT+0x4e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_Base_Start_IT+0x4e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_TIM_Base_Start_IT+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d010      	beq.n	8002caa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c98:	e007      	b.n	8002caa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400

08002cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d020      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0202 	mvn.w	r2, #2
 8002cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f998 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f98b 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f99a 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d020      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0204 	mvn.w	r2, #4
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f972 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f965 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f974 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d020      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0208 	mvn.w	r2, #8
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2204      	movs	r2, #4
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f94c 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f93f 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f94e 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d020      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01b      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0210 	mvn.w	r2, #16
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f926 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f919 	bl	800302e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f928 	bl	8003052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0201 	mvn.w	r2, #1
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fe8c 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa6f 	bl	800332e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8f8 	bl	8003064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa42 	bl	800331c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIM_ConfigClockSource+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0b4      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x186>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef4:	d03e      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0xd4>
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	f200 8087 	bhi.w	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	f000 8086 	beq.w	8003012 <HAL_TIM_ConfigClockSource+0x172>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d87f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d01a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xa6>
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d87b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d050      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x11a>
 8002f18:	2b60      	cmp	r3, #96	; 0x60
 8002f1a:	d877      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b50      	cmp	r3, #80	; 0x50
 8002f1e:	d03c      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xfa>
 8002f20:	2b50      	cmp	r3, #80	; 0x50
 8002f22:	d873      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d058      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x13a>
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d86f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d064      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d86b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d060      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d867      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05c      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d05a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15a>
 8002f44:	e062      	b.n	800300c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f000 f96a 	bl	800322e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]
      break;
 8002f72:	e04f      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f000 f953 	bl	800322e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f96:	609a      	str	r2, [r3, #8]
      break;
 8002f98:	e03c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 f8ca 	bl	8003140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2150      	movs	r1, #80	; 0x50
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f921 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e02c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 f8e8 	bl	800319c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2160      	movs	r1, #96	; 0x60
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f911 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e01c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 f8aa 	bl	8003140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f901 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e00c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 f8f8 	bl	80031fa <TIM_ITRx_SetConfig>
      break;
 800300a:	e003      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	e000      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
	...

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x28>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x28>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <TIM_Base_SetConfig+0xc4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a20      	ldr	r2, [pc, #128]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <TIM_Base_SetConfig+0x52>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d003      	beq.n	80030ca <TIM_Base_SetConfig+0x52>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <TIM_Base_SetConfig+0xc4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d108      	bne.n	80030dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <TIM_Base_SetConfig+0xc0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d103      	bne.n	8003110 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	611a      	str	r2, [r3, #16]
  }
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400

08003140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f023 0201 	bic.w	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 030a 	bic.w	r3, r3, #10
 800317c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0210 	bic.w	r2, r3, #16
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	031b      	lsls	r3, r3, #12
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	f043 0307 	orr.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800322e:	b480      	push	{r7}
 8003230:	b087      	sub	sp, #28
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003248:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	021a      	lsls	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	431a      	orrs	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	609a      	str	r2, [r3, #8]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e041      	b.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d004      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10c      	bne.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400

0800331c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	2600      	movs	r6, #0
 8003344:	4d0c      	ldr	r5, [pc, #48]	; (8003378 <__libc_init_array+0x38>)
 8003346:	4c0d      	ldr	r4, [pc, #52]	; (800337c <__libc_init_array+0x3c>)
 8003348:	1b64      	subs	r4, r4, r5
 800334a:	10a4      	asrs	r4, r4, #2
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	f000 f822 	bl	8003398 <_init>
 8003354:	2600      	movs	r6, #0
 8003356:	4d0a      	ldr	r5, [pc, #40]	; (8003380 <__libc_init_array+0x40>)
 8003358:	4c0a      	ldr	r4, [pc, #40]	; (8003384 <__libc_init_array+0x44>)
 800335a:	1b64      	subs	r4, r4, r5
 800335c:	10a4      	asrs	r4, r4, #2
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	080033d4 	.word	0x080033d4
 800337c:	080033d4 	.word	0x080033d4
 8003380:	080033d4 	.word	0x080033d4
 8003384:	080033d8 	.word	0x080033d8

08003388 <memset>:
 8003388:	4603      	mov	r3, r0
 800338a:	4402      	add	r2, r0
 800338c:	4293      	cmp	r3, r2
 800338e:	d100      	bne.n	8003392 <memset+0xa>
 8003390:	4770      	bx	lr
 8003392:	f803 1b01 	strb.w	r1, [r3], #1
 8003396:	e7f9      	b.n	800338c <memset+0x4>

08003398 <_init>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr

080033a4 <_fini>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr
